This is ecb.info, produced by makeinfo version 5.2 from ecb.texi.

INFO-DIR-SECTION GNU Emacs Lisp
START-INFO-DIR-ENTRY
* ECB: (ecb).           Emacs Code Browser
END-INFO-DIR-ENTRY


File: ecb.info,  Node: ecb-create-layout,  Next: ecb-face-options,  Prev: ecb-compilation,  Up: Customizable options

5.3.9 Group ecb-create-layout
-----------------------------

This group contains settings for creating new ECB-layouts:

 -- User Option: create-layout-file
     File where all layouts created by 'ecb-create-new-layout' are
     stored.

 -- User Option: ecb-create-layout-frame-height
     Frame height of the layout creation frame.

 -- User Option: ecb-create-layout-frame-width
     Frame width of the layout creation frame.


File: ecb.info,  Node: ecb-face-options,  Next: ecb-faces,  Prev: ecb-create-layout,  Up: Customizable options

5.3.10 Group ecb-face-options
-----------------------------

This group contains settings for all faces used in ECB:

 -- User Option: directories-general-face
     Basic face for the ECB directories buffer.  This defines the basic
     face the whole directory buffer should displayed with.  If the face
     'ecb-default-general-face' is used then the display of all
     ECB-tree-buffers can be changed by modifying only the face
     'ecb-default-general-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: directory-face
     Face used for highlighting current directory in the directories
     buffer.  If the face 'ecb-default-highlight-face' is used then the
     display of all ECB-tree-buffers can be changed by modifying only
     the face 'ecb-default-highlight-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: history-face
     Face used for highlighting current history-entry in the history
     buffer.  If the face 'ecb-default-highlight-face' is used then the
     display of all ECB-tree-buffers can be changed by modifying only
     the face 'ecb-default-highlight-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: history-general-face
     Basic face for the ECB directory buffer.  This defines the basic
     face the whole history buffer should displayed with.  If the face
     'ecb-default-general-face' is used then the display of all
     ECB-tree-buffers can be changed by modifying only the face
     'ecb-default-general-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: method-face
     Face used for highlighting current method, class or variable in the
     methods buffer.  If the face 'ecb-default-highlight-face' is used
     then the display of all ECB-tree-buffers can be changed by
     modifying only the face 'ecb-default-highlight-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: method-non-semantic-face
     Face used for for displaying tags of sources not supported by
     semantic.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: methods-general-face
     Basic face for the ECB methods buffer.  This defines the basic face
     the whole methods buffer should displayed with.  If the face
     'ecb-default-general-face' is used then the display of all
     ECB-tree-buffers can be changed by modifying only the face
     'ecb-default-general-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: source-face
     Face used for highlighting current source in the sources buffer.
     If the face 'ecb-default-highlight-face' is used then the display
     of all ECB-tree-buffers can be changed by modifying only the face
     'ecb-default-highlight-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: source-in-directories-buffer-face
     Face for source files in the directories buffer.

 -- User Option: sources-general-face
     Basic face for the ECB sources buffer.  This defines the basic face
     the whole sources buffer should displayed with.  If the face
     'ecb-default-general-face' is used then the display of all
     ECB-tree-buffers can be changed by modifying only the face
     'ecb-default-general-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: tag-header-face
     Face used for highlighting the tag header after jumping to it by
     clicking onto a node in the methods buffer.


File: ecb.info,  Node: ecb-faces,  Next: ecb-download,  Prev: ecb-face-options,  Up: Customizable options

5.3.11 Group ecb-faces
----------------------

This group contains all faces used in ECB:

'ecb-bucket-node-face:'
     Face which can be used for displaying bucket tags in the methods
     buffer.  See also 'ecb-bucket-node-display'.

'ecb-default-general-face:'
     Basic face for all ECB tree-buffers.  It's recommended to define
     here the font-family, the font-size, the basic color etc.

     In GNU Emacs 21.X all faces (even the face
     'ecb-default-highlight-face') used in the ECB tree-buffers inherit
     from this face.  Therefore the default attributes like font etc.
     of a face used in a tree-buffer can be very easily changed with
     face 'ecb-default-general-face'.

     With XEmacs and GNU Emacs 20.X there is no inheritance-feature but
     the options 'ecb-directories-general-face',
     'ecb-sources-general-face', 'ecb-methods-general-face' and
     'ecb-history-general-face' offer the choice to use the face
     'ecb-default-general-face' so also with XEmacs and GNU Emacs 20.X
     the basic face-settings can be easily changed just by customizing
     the face 'ecb-default-general-face'!

'ecb-default-highlight-face:'
     Define basic face for highlighting the selected node in an ECB
     tree-buffer.

     In GNU Emacs 21.X all highlighting faces in the ECB tree-buffers
     inherit from this face.  Therefore the default attributes like font
     etc.  of a face used in a tree-buffer for highlighting the current
     tag can be very easily changed with face
     'ecb-default-highlight-face'.

     With XEmacs and GNU Emacs 20.X there is no inheritance-feature but
     the options 'ecb-directory-face', 'ecb-source-face',
     'ecb-method-face' and 'ecb-history-face' offer the choice to use
     the face 'ecb-default-highlight-face' so also with XEmacs and GNU
     Emacs 20.X the basic face-settings can be easily changed just by
     customizing the face 'ecb-default-highlight-face'!

'ecb-directories-general-face:'
     Basic face for the ECB directories buffer.  It큦 recommended to
     define here the font-family, the font-size, the basic color etc.

'ecb-directory-face:'
     Define face used for highlighting current directory in the
     directories buffer.

'ecb-history-face:'
     Define face used for highlighting current history-entry in the
     history buffer.

'ecb-history-general-face:'
     Basic face for the ECB history buffer.  It큦 recommended to define
     here the font-family, the font-size, the basic color etc.

'ecb-method-face:'
     Define face used for highlighting current method, class or variable
     in the methods buffer.

'ecb-methods-general-face:'
     Basic face for the ECB methods buffer.  It큦 recommended to define
     here the font-family, the font-size, the basic color etc.

'ecb-method-non-semantic-face:'
     Define face used for displaying tags of sources not supported by
     semantic.

'ecb-mode-line-data-face'
     Define face for the data in the mode-line.  See
     'ecb-mode-line-data'.

'ecb-mode-line-prefix-face'
     Define face for the prefix in the mode-line.  See
     'ecb-mode-line-prefixes'.

'ecb-source-face:'
     Define face used for highlighting current source in the sources
     buffer.

'ecb-source-in-directories-buffer-face:'
     Define a face for displaying sources in the directories buffer.

'ecb-sources-general-face:'
     Basic face for the ECB sources buffer.  It큦 recommended to define
     here the font-family, the font-size, the basic color etc.

'ecb-tag-header-face:'
     Define face used for highlighting the tag header after jumping to
     it by clicking onto a node in the methods buffer.

'ecb-tree-guide-line-face:'
     Define face for the guide-lines in the tree-buffers.  See the
     option 'ecb-tree-buffer-style' for a explanation of guide-lines.

'ecb-type-tag-class-face:'
     Define face used with option 'ecb-type-tag-display'.

'ecb-type-tag-enum-face:'
     Define face used with option 'ecb-type-tag-display'.

'ecb-type-tag-group-face:'
     Define face used with option 'ecb-type-tag-display'.

'ecb-type-tag-interface-face:'
     Define face used with option 'ecb-type-tag-display'.

'ecb-type-tag-struct-face:'
     Define face used with option 'ecb-type-tag-display'.

'ecb-type-tag-typedef-face:'
     Define face used with option 'ecb-type-tag-display'.

'ecb-type-tag-union-face:'
     Define face used with option 'ecb-type-tag-display'.

'ecb-mode-line-win-nr-face'
     Define face for the window-number in the mode-line.  See
     'ecb-mode-line-display-window-number'.

Just call 'customize-face <face-name>' to customize these faces for your
personal taste.  Or customize the related option in the group *note
ecb-face-options::.


File: ecb.info,  Node: ecb-download,  Next: ecb-help,  Prev: ecb-faces,  Up: Customizable options

5.3.12 Group ecb-download
-------------------------

This group contains settings for downloading and installing a new ECB
from within ECB:

 -- User Option: download-delete-archive
     Should the downloaded archive be deleted after successful
     installation or after failure during the installation-process.
     Possible values are:

        - 'only-after-success': Archive is only deleted after successful
          installation but not if a failure occurs during the
          installation process.
        - 'always': Archive is also deleted if an error occurs.
        - 'nil': Archive will never be deleted.

 -- User Option: download-install-parent-dir
     Parent directory where downloaded packages are installed.

     ECB installs a downloaded package in this directory, i.e.  the
     downloaded archive X.tar.gz will be extracted in this directory so
     afterwards this directory contains a new subdirectory X which
     contains the downloaded package.

     This directory must be write-able!

 -- User Option: download-package-version-type
     Version type ECB is allowed to download for upgrading.

     If you want to upgrade to a newer ECB-version via
     'ecb-download-ecb' or if you must upgrade to newer semantic- eieio-
     and/or speedbar-versions (because ECB requires these newer
     versions) then this option specifies which version-types are
     allowed.  ECB checks on the download-sites of
     ECB/semantic/eieio/speedbar which versions are currently available
     and then downloads always the latest version matching the specified
     type:

        - 2: Get the newest version of all stable versions available.
        - 1: Get the newest version of all stable and beta versions
          available.
        - 0: Get the newest version of all stable, beta and alpha
          versions available.
        - -1: Ask before downloading in the minibuffer for a version
          (TAB-completion of all available versions is possible).

     So, 2 means stable, 1 means stable and betas, 0 means stable, betas
     and alphas and -1 means ask the user for a version.

     Per default stable and beta-versions are allowed (value 1).

     But all versions must match the restrictions of the specified min-
     and max-versions of the required packages.  For this see the file
     README!

 -- User Option: download-url
     URL where download-able ECB-versions are located.  The
     ECB-archive-file (e.g.  ecb-1.70.tar.gz) will be appended to this
     URL and 'ecb-download-ecb' will try to download this archive.

     Note: Normally this URL should never change but who knows...


File: ecb.info,  Node: ecb-help,  Next: ecb-eshell,  Prev: ecb-download,  Up: Customizable options

5.3.13 Group ecb-help
---------------------

This group contains settings for the ECB online help:

 -- User Option: help-html-path
     Path where the ECB online help in HTML format resides.  This must
     be the location of the 'ecb.html' which comes with the ECB
     distribution.  If is installed by unpacking the archive available
     on the ECB website then this is the subdir 'ecb-help-html-subdir'
     of the installation directory of ECB. If it is installed as
     XEmacs-package (e.g.  via the package manager of XEmacs) then this
     is probably either the directory "../../html/" or
     "../../etc/ecb/html/" (both relative to the Elisp directory of
     ECB).

     The path can either be an absolute path or a path relative to the
     directory where the Elisp files of ECB are.

     Normally there should be no need to change this option!

 -- User Option: help-info-path
     Path where the ECB online help in info format resides.  This must
     be the location of the 'ecb.info' which comes with the ECB
     distribution.  If is installed by unpacking the archive available
     on the ECB website then this is the subdir 'ecb-help-info-subdir'
     of the installation directory of ECB. If it is installed as
     XEmacs-package (e.g.  via the package manager of XEmacs) then this
     is probably the directory "../../info/" (relative to the Elisp
     directory of ECB).

     The path can either be an absolute path or a path relative to the
     directory where the Elisp files of ECB are.

     Normally there should be no need to change this option!

 -- User Option: show-help-format
     The format 'ecb-show-help' shows its online help.  Allowed values
     are 'info (for the Info format) and 'html (for HTML format).  If
     the value is 'html then 'browse-url-browser-function' says which
     browser is used.

     Note: If you got ECB as a standard XEmacs-package maybe the
     HTML-online-documentation is not included.


File: ecb.info,  Node: ecb-eshell,  Next: ecb-speedbar,  Prev: ecb-help,  Up: Customizable options

5.3.14 Group ecb-eshell
-----------------------

This group contains settings for eshell integration within the ECB:

 -- User Option: eshell-auto-activate
     Startup the eshell and display it in the compile-window.  If
     current layout does not display a compile-window (see
     'ecb-compile-window-height') then nothing is done.

 -- User Option: eshell-enlarge-when-eshell
     Enlarge the compile-window if it is selected by 'eshell'.  This
     takes only effect if the command 'eshell' is called!

 -- User Option: eshell-fit-window-to-command-output
     Fit the compile-window after an eshell-command to the output.  This
     is done by the function 'ecb-eshell-fit-window-to-output' which is
     added to 'eshell-post-command-hook' ie.  which is running autom.
     after each eshell-command.

 -- User Option: eshell-synchronize
     Synchronize eshell with the default-directory of current
     source-buffer.  The synchronization is done by
     'ecb-eshell-current-buffer-sync' which can be called interactively
     but normally it is called autom.  by the
     'ecb-current-buffer-sync-hook'.


File: ecb.info,  Node: ecb-speedbar,  Next: ecb-non-semantic,  Prev: ecb-eshell,  Up: Customizable options

5.3.15 Group ecb-speedbar
-------------------------

TODO


File: ecb.info,  Node: ecb-non-semantic,  Next: ecb-winman,  Prev: ecb-speedbar,  Up: Customizable options

5.3.16 Group ecb-non-semantic
-----------------------------

This group contains settings for parsing and displaying non-semantic
files:

 -- User Option: auto-save-before-etags-methods-rebuild
     Automatic saving of current buffer before rebuilding its methods.

     This option is only relevant for sources which are supported and
     parsed by etags (see 'ecb-process-non-semantic-files').  Because
     etags is an external tool a source-buffer can only be reparsed if
     the buffer is saved to disk.  So the command
     'ecb-rebuild-methods-buffer' checks for sources which are not
     supported by semantic or imenu if either this option is t or if the
     major-mode of the source-buffer is contained in this list: In both
     cases ECB saves the current source-buffer before it re-runs etags
     for reparsing the source.  If nil or if the major-mode is not
     contained then no automatic saving will be done!

     For all source supported by semantic or by imenu this option takes
     no effect.

 -- User Option: non-semantic-exclude-modes
     Exclude modes from parsing with imenu or etags.  Per default, ECB
     tries to parse all file-types not supported by semantic with imenu
     or etags or some other method (for details see the option
     'ecb-non-semantic-parsing-function').  If a file-type can not be
     parsed by semantic, imenu or etags than this simply results in an
     empty method-buffer for this file.  But nevertheless you will get a
     message "Sorry, no support for a file of that extension" which
     comes from the speedbar-library and can not switched off.
     Therefore if a 'major-mode' is known as not parse-able by semantic,
     imenu or etags it can be added to this option and then it will be
     excluded from being tried to parsed.

 -- User Option: non-semantic-methods-initial-expand
     Initially expand all tags for not by semantic supported sources.
     This option can be customized on a major-mode basis, i.e.  if a
     'major-mode' is contained in this option then all tags for this
     modes will be initially expanded - otherwise not.

 -- User Option: non-semantic-parsing-function
     Define mode-dependent parsing functions for non-semantic files.
     This is an alist where the car is a major-mode symbol and the cdr
     is a function-symbol of a function which should be used for parsing
     a non-semantic buffer, i.h.  a buffer for which no semantic grammar
     exists.  Such a function gets one argument - the filename of
     current buffer - and has to generate and return a tag/tag list
     which is understandable by 'speedbar-insert-generic-list'.
     speedbar has already included two functions
     'speedbar-fetch-dynamic-imenu' and 'speedbar-fetch-dynamic-etags'
     which can be used for parsing buffers with imenu rsp.  etags.

     This option takes only effect if 'ecb-process-non-semantic-files'
     is not nil: Then ECB checks for non-semantic buffers if current
     'major-mode' is contained in this option and if yes, then the
     specified parsing function is called; if not then the cars of the
     elements of 'speedbar-dynamic-tags-function-list' are called in
     that sequence they are listed in this variable.  See option
     'speedbar-dynamic-tags-function-list' for further details.

     In most cases imenu-parsing is preferable over etags-parsing
     because imenu operates on Emacs-buffers and needs no external tool
     and therefore parsing works also if current contents of a buffer
     are not saved to disk.  But maybe sometimes etags may return better
     parsing results

     IMPORTANT: if imenu-parsing should be used then the option
     'speedbar-use-imenu-flag' must be set to not nil!

 -- User Option: process-non-semantic-files
     Display content of non-semantic-files in the ECB-methods-buffer.
     See also 'ecb-non-semantic-parsing-function'.

 -- User Option: rebuild-non-semantic-methods-before-hook
     Hook running at beginning of the function
     'ecb-rebuild-methods-buffer-for-non-semantic'.  This function is
     always called by the command 'ecb-rebuild-methods-buffer' for not
     semantic supported source-types.

     Every function of this hook gets one argument: The complete
     filename of the current source-buffer in the edit-window.  The
     Method-buffer is only rebuild by
     'ecb-rebuild-methods-buffer-for-non-semantic' if either the hook
     contains no function (the default) or if no function of this hook
     returns nil!  See 'run-hook-with-args-until-failure' for
     description how these function are processed.


File: ecb.info,  Node: ecb-winman,  Next: ecb-mode-line,  Prev: ecb-non-semantic,  Up: Customizable options

5.3.17 Group ecb-winman
-----------------------

This group contains settings for supporting several window-managers:

 -- User Option: winman-escreen-number
     Number of the escreen which is reserved for ECB. If you go to the
     escreen with this number you go always to the escreen with
     activated ECB. All other escreen-numbers are escreens with
     deactivated ECB!

 -- User Option: winman-winring-name
     Name of the winring-window-configuration reserved for ECB. If you
     go to the window-configuration with this name you go always to the
     window-configuration with activated ECB. All other
     window-configuration are configurations with deactivated ECB!


File: ecb.info,  Node: ecb-mode-line,  Prev: ecb-winman,  Up: Customizable options

5.3.18 Group ecb-mode-line
--------------------------

This group contains settings for the modelines of the ECB-tree-buffers:

 -- User Option: mode-line-data
     Data shown in the modelines of the special ECB-buffers.  Everey
     element of this list is a cons-cell where the car is used to define
     a buffer-name and the cdr to define the modeline-data for that
     buffer.  For details about how to defining a buffer-name see
     'ecb-mode-line-prefixes' - its completely the same.

     The cdr is the data for ths modeline and can either be the symbol
     'sel-dir' or 'sel-source' whereas the former one displays the
     current selected directory as modeline-data and the latter one the
     current selected source-file (without path).

     In addition to these two predefined values for every special
     ECB-buffer a plain string (which is displayed) or a function can be
     specified which gets three args (name of the buffer, current
     selected directory and current selected source-file) and must
     return a string which will be displayed in the modeline (or nil if
     no data should be displayed).  Such a function can add the
     text-property 'help-echo' to the result-string.  Then this
     help-string will be displayed when the user moves the mouse over
     this section of the modeline.

     If a special ECB-buffer should not display special data in its
     modeline then this buffer-name should either not being added to
     this option or added with "No data" (= nil as cdr).

     The whole modeline of the special ECB-buffer consists of the prefix
     of 'ecb-mode-line-prefixes' and the data of 'ecb-mode-line-data' -
     eventually prepended by the window-number, see
     'ecb-mode-line-display-window-number'.

 -- User Option: mode-line-data-face
     Face used for the data in the mode-line.  See 'ecb-mode-line-data'.
     For XEmacs the face should inherit from the face 'modeline' (see
     'set-face-parent')!

 -- User Option: mode-line-display-window-number
     Display in the modeline of every special ECB-window the
     window-number.  The left-top-most window in a frame has the
     window-number 0 and all other windows are numbered with increasing
     numbers in the sequence, functions like 'other-window' or
     'next-window' would walk through the frame.

     This can be used to jump to windows by number with commands like:

            (defun my-switch-to-window-number (number)
              ``Switch to the nth window''
              (interactive ``P'')
              (if (integerp number)
                  (select-window (nth number (window-list)))))

     Currently this feature is only available for GNU Emacs 21.X,
     because neither GNU Emacs < 21 nor XEmacs can evaluate dynamically
     forms in the mode-line.

 -- User Option: mode-line-prefixes
     Prefixes shown in the modelines of the special ECB-buffers.  The
     displayed prefix then looks like: "[ <PREFIX>[: ]]", means if a
     prefix is defined for an special ECB-buffer then a single space is
     prepended and if there is additional text to display (e.g.  the
     current directory in the sources buffer, see 'ecb-mode-line-data')
     then also the string ": " is appended.

     Everey element of this list is a cons-cell where the car is used to
     define a buffer-name and the cdr to define the modeline-prefix for
     that buffer.

     The buffer-name can either be defined as plain string or with a
     symbol which contains the buffer-name as value.  The latter one is
     recommended to define a prefix for one of the builtin
     ECB-tree-buffers because then simply the related option-symbol can
     be used.  To add a prefix for the builtin directories tree-buffer
     just set the symbol 'ecb-directories-buffer-name' as car.

     The cdr is the prefix for a buffer and can either be a string which
     used as it is or a function-symbol which is called with three
     argument (the buffer-name, the current selected directory and the
     current selected source-file) and must return either nil (for no
     prefix) or a string which is then used a prefix.  Such a function
     can add the text-property 'help-echo' to the result-string.  Then
     this help-string will be displayed when the user moves the mouse
     over this section of the modeline.

     If a special ECB-buffer should not have a prefix in its modeline
     then this buffer-name should either not being added to this option
     or added with "No prefix" (= nil as cdr).

 -- User Option: mode-line-prefix-face
     Face used for the prefix in the mode-line.  See
     'ecb-mode-line-prefixes'.  For XEmacs the face should inherit from
     the face 'modeline' (see 'set-face-parent')!

 -- User Option: mode-line-win-nr-face
     Face used for the window-number in the mode-line.  See
     'ecb-mode-line-display-window-number'.  For XEmacs the face should
     inherit from the face 'modeline' (see 'set-face-parent')!


File: ecb.info,  Node: Submitting problem report,  Next: Upgrading,  Prev: Customizing,  Up: Top

6 Submitting a problem report
*****************************

If you run into problems with ECB you should first take a look into

   - *note FAQ:: or
   - *note Conflicts and bugs:: or
   - *note Tips and tricks:: or
   - the appropriate section of this online-manual.

If your problem(s) still remain you can/should send a problem report to
the ECB mailing list <ecb-list@lists.sourceforge.net>.  ECB offers you a
command which does all necessary for you to send a problem report.  Just
call 'ecb-submit-problem-report'!  Please read the documentation of this
command, see *note Interactive ECB commands::.

If you think there are problems concerning parsing-results for certain
sources supported by semantic then you should call
'ecb-dump-semantic-toplevel' for the problematic source-buffer *BEFORE*
you call 'ecb-submit-problem-report' because this "dump"-command
generates for the current-buffer a new buffer with name "*ecb-tag-dump*"
which contains all semantic-tags for this source.  The contents of this
"*ecb-tag-dump*" will then autom.  be added to the problem-report
generated by 'ecb-submit-problem-report'!

This command creates a problem-report buffer for you.  After that you
get a menu "Mail" (dependent on the mail-package used, the menu can have
a different name) with commands to send the problem report.  But for
this the variable 'mail-user-agent' must be configured right for your
system.  If you can큧 get working this mechanism you can simply copy the
whole problem-report buffer after filling it out and sending it with
your standard mail-client to <ecb-list@lists.sourceforge.net>!

Please read also the documentation of the option 'ecb-debug-mode' and
switch on the debug mode of ECB (also available in the Help-menu of
ECB!) before submitting a problem-report!


File: ecb.info,  Node: Upgrading,  Next: Tips and tricks,  Prev: Submitting problem report,  Up: Top

7 Upgrading and downloading packages
************************************

This chapter describes all aspects of upgrading to a newer version of
ECB.

The first section describes how to download and install a new package
from the web, where "package" means either ECB itself or the required
libraries semantic, eieio and speedbar.

After installing a new ECB-version ECB checks if the values of the
customized ECB-options are still compatible.  If not ECB does some smart
things.  This is the topic of the second section.

* Menu:

* Downloading new versions::    How to download newer versions of packages
* Auto. option-upgrading::      ECB can auto. upgrade your options


File: ecb.info,  Node: Downloading new versions,  Next: Auto. option-upgrading,  Prev: Upgrading,  Up: Upgrading

7.1 Downloading new versions of ECB and/or required packages
============================================================

ECB offers the possibility to upgrade to newer versions direct from the
ECB-website.  This can be done if the following requirements are
satisfied:

  1. A connection to the web is available
  2. The tools "wget", "tar" and "gzip" are installed

     With Unix-systems these tools are in the standard-distribution.  If
     you are running any Microsoft Windows system then you need
     cygwin(1) which offers these tools too.  On every system these
     tools must reside in the 'PATH' environment-variable!

     If you are behind a firewall and you have to use a proxy you maybe
     need the following wget-configuration in your file '~/.wgetrc':

          # Define your proxies (where 8080 and 8081 are examples
          # for the port-numbers)
          http_proxy = http://your.proxy.com:8080
          ftp_proxy  = http://your.ftpproxy.com:8081

          # If you do not want to use proxy at all, set this to off.
          use_proxy = on

If these requirements are satisfied you can download and install both
ECB itself and also the required versions of semantic, eieio and
speedbar:

   * Download a new ECB-version with 'ecb-download-ecb':

     A description for this command you will find in *note Interactive
     ECB commands::.  Check also the options of the customize-group
     'ecb-download' (*note ecb-download::).

   * Download and install of required packages:

     ECB checks at load-time if the packages semantic, eieio and
     speedbar are at least installed and at start-time if the required
     versions of semantic, eieio and speedbar (see 'README') are
     installed and loaded into Emacs.  If not you will be asked if you
     want auto.  download and install them.  If you confirm this then
     ECB does the following:

       1. Checking which versions are available at the download-site of
          the required packages.  With the option
          'ecb-download-package-version-type' you can specify which type
          of versions (only stable, stable and betas or stable, betas
          and alphas) you allow to download and install.  This option
          offers also the choice of asking you for a certain version.
          Depending of this setting ECB either ask you which version it
          should download and install or chooses autom.  the newest
          version available which is matching both its
          min-max-requirements and the setting in
          'ecb-download-package-version-type'.

          NOTE: Currently there are only beta-versions of speedbar
          available therefore this option has to be set to 1 (allow
          stable and beta versions).  But the speedbar beta-versions are
          very stable!

       2. Downloading and installing the right version (see 1.)  of the
          required packages.  ECB downloads and installs the new package
          versions in subdirectories of
          'ecb-download-install-parent-dir'.

     If both of these actions succeed then you will get a message-buffer
     which tells you something like:

          -----------------------------------------------------------------
          Current state of the required packages semantic, eieio, speedbar:

          - semantic author-version must be [1.4, 1.4.9]:
            Installed in /usr/local/lib/site-lisp/semantic-1.4

          - eieio author-version must be [0.17, 0.17.9]:
            Correct version already loaded!

          - speedbar author-version must be [0.14beta1, 0.15.9]:
            Correct version already loaded!

          After adding the new directory to your load-path and then
          restarting Emacs the new package(s) can be activated.
          -----------------------------------------------------------------


     *Remark 1*: "P author-version must be [x y]" means, that ECB
     requires package P in a version-number >= x and <= y.

     *Remark 2*: By setting the option 'ecb-version-check' to 'nil' you
     can prevent ECB from checking correct versions of semantic, eieio
     and speedbar but it's strongly recommended not to do this!

   ---------- Footnotes ----------

   (1) cygwin is available at <http://cygwin.com/>


File: ecb.info,  Node: Auto. option-upgrading,  Prev: Downloading new versions,  Up: Upgrading

7.2 Automatic upgrading of options
==================================

* Menu:

* User interface::              Options and commands you should know
* Background information::      Maybe some interesting informations


File: ecb.info,  Node: User interface,  Next: Background information,  Prev: Auto. option-upgrading,  Up: Auto. option-upgrading

7.2.1 User interface for option-upgrading
-----------------------------------------

There are two interactive commands (*note Interactive ECB commands::):

   - 'ecb-upgrade-options': Does all necessary beginning with a
     incompatibility-check for all options, upgrading/resetting
     incompatible options and ending with the display of all upgraded or
     reset options.

   - 'ecb-display-upgraded-options': Displays a temp.  buffer with all
     upgraded or reseted ECB-options with their old and new values.

If the option 'ecb-auto-compatibility-check' has a non-nil value (which
is the default) then ECB does all this stuff automatically at startup.
This is very recommended!

If you are interested in some background information, read *note
Background information::!


File: ecb.info,  Node: Background information,  Prev: User interface,  Up: Auto. option-upgrading

7.2.2 Background information
----------------------------

Big packages like ECB will be enhanced and developed continuously so
sometimes a new version must be released.  Such packages offer in
general a lot of customizable options so probably some of these options
change the type or are renamed because the old type and/or name of the
option makes no sense in the new release.

Especially options which have changed the type of their value are now a
problem for the user which want to upgrade to the latest ECB-version: If
the user has saved a certain value for option X in its file '.emacs' but
the type of this saved value doesn't match the new defined type in the
defcustom-form after an ECB-upgrade then there can occur serious
problems like ECB can not be started anymore or even Emacs can not be
started without errors.

Until now there was only one way to fix these problems: The user must
manually edit his file '.emacs' and remove all entries for options which
have now another type.  After this and after restarting Emacs the new
default-values of the type-changed options in the new ECB-release are
active and the user can go on using Emacs and ECB. But this approach to
fix the incompatible-option-problem has two serious drawbacks:

  1. The user must manually edit the customize-section in his file
     '.emacs'.  This should normally not be done and if then only by
     old-handed Emacs-users.

  2. The customized value of the option X in the old-release (with the
     old type) is lost because after removing the related entry from the
     file '.emacs' the new default-value is active, so the user must
     re-customize the option X.

OK, this is one half of the option-upgrade-problem but a new ECB-release
can also rename a option from name X to name Y because the new name Y
makes much more sense and/or is more mnemonic.  If only the name has
changed but not the type this is not a serious problem like above but
also annoying because the customized value of the old-option X takes no
effect in the new release but instead the default-value of the
new-option Y is now active.  But nevertheless this problem has the
drawback number 2 (see above).

The last category of upgrade-problems is a renamed option which has also
changed its type.

ECB has a solution for all these problems:

   * It checks all customized values of all ECB-options if they are
     still type-compatible.  If not then it tries to upgrade the
     old-value to the new value-type and if this is not possible then it
     resets the option to the new default value and store it via
     customize in the .emacs-file (or in any file which is used for
     customized options).

   * It offers a special constant 'ecb-upgradable-option-alist' which
     allows the ECB-maintainers to define special transformings for
     renamed options so even the value of an old-option X can be savely
     transformed to the new-option Y and the old setting is not lost.

All these checks and transformings are done at beginning of activating
ECB - if the option 'ecb-auto-compatibility-check' is not nil.  If ECB
has recognized incompatible or renamed options it does its
upgrading/reseting-job so all ECB-options have correct types so ECB can
start correct.  After ECB is started it displays a list of all upgraded
or reseted option with their old and new values.


File: ecb.info,  Node: Tips and tricks,  Next: Elisp programming,  Prev: Upgrading,  Up: Top

8 Tips and tricks
*****************

This chapter contains some tips and tricks how to deal best with some
situations.

* Menu:

* Changing faces::              Changing faces in the ECB tree-buffers
* Small screens::               Working with small screens
* Big screens::                 Working with big screens
* Simulating speedbar::         Simulating speedbar without an extra frame
* Integrating speedbar::        Integrating speedbar in the ECB-frame
* Optimize scrolling::          Optimize scrolling in the edit-window
* Large directories::           Working with large directories
* Using eshell::                Optimal using of eshell in ECB
* Grepping directories::        Grepping directories with ECB
* Working with JDEE::           Working best with ECB and JDEE
* Compile-window on demand::    Displaying the compile-window on demand
* Non-semantic sources::        Parsing and displaying non-semantic sources
* Hide-show::                   Using hide-show from the methods-buffer-menu
* Window-managers and ECB::     Support of several Emacs-window-managers
* Tree-buffer styles::          Displaying the trees with different styles
* Using semanticdb::            Using semanticdb for going to external nodes


File: ecb.info,  Node: Changing faces,  Next: Small screens,  Prev: Tips and tricks,  Up: Tips and tricks

8.1 Changing faces in the ECB tree-buffers
==========================================

There are two basic faces:

   * 'ecb-default-general-face': Basic face for displaying an
     ECB-tree-buffer.

     It큦 recommended to define the font-family, the font-size, the
     basic color etc.  with this face.

     In GNU Emacs 21.X all faces (even the face
     'ecb-default-highlight-face') used in the ECB tree-buffers inherit
     from this face.  Therefore the default attributes like font etc.
     of a face used in a tree-buffer can be very easily changed with
     face 'ecb-default-general-face'.

     With XEmacs and GNU Emacs 20.X there is no inheritance-feature but
     the options 'ecb-directories-general-face',
     'ecb-sources-general-face', 'ecb-methods-general-face' and
     'ecb-history-general-face' offer the choice to use the face
     'ecb-default-general-face' so also with XEmacs and GNU Emacs 20.X
     the basic face-settings can be easily changed just by customizing
     the face 'ecb-default-general-face'.

   * 'ecb-default-highlight-face': Basic face for highlighting the
     current node in an ECB-tree-buffer.

     In GNU Emacs 21.X all highlighting faces used in the ECB
     tree-buffers inherit from this face.  Therefore the default
     attributes like font etc.  of a highlighting face used in a
     tree-buffer can be very easily changed with face
     'ecb-default-highlight-face'.

     With XEmacs and GNU Emacs 20.X there is no inheritance-feature but
     the options 'ecb-directory-face', 'ecb-source-face',
     'ecb-method-face' and 'ecb-history-face' offer the choice to use
     the face 'ecb-default-highlight-face' so also with XEmacs and GNU
     Emacs 20.X the basic face-settings can be easily changed just by
     customizing the face 'ecb-default-highlight-face'.

With these faces you can change the basic attributes easily and fast for
ALL ECB-tree-buffers.  But you are also able to display each
ECB-tree-buffer with different faces, see the different options for
every tree-buffer mentioned above.

*Please note* (only for XEmacs users): Cause of the lack of the
font-inheritance feature using ONE other font for the ECB-methods buffer
can NOT be achieved just by setting 'ecb-methods-general-face' to
'ecb-default-general-face' and changing the font of this default face.
In addition you have to set the same font also for the face
'ecb-bucket-node-face' like in the following example:

     (defconst my-ecb-font
               "-outline-Courier-normal-normal-13-97-96-96-c-*-iso8859-1")
     (set-face-font 'ecb-default-general-face my-ecb-font)
     (set-face-font 'ecb-bucket-node-face my-ecb-font)

This code sets the new defined font 'my-ecb-font' as font for all(1)
ECB-tree-buffers (incl.  the methods buffer).

   ---------- Footnotes ----------

   (1) Of course 'ecb-directories-general-face',
'ecb-sources-general-face', 'ecb-methods-general-face' and
'ecb-history-general-face' must be set to 'ecb-default-general-face'!


File: ecb.info,  Node: Small screens,  Next: Big screens,  Prev: Changing faces,  Up: Tips and tricks

8.2 Working with small screens
==============================

If your screen is very small so you need every square-centimeter for
displaying the buffer which you want to edit, ECB offers you a special
layouts, where only the ECB-methods buffer is displayed on top or on
left-side.  Here comes what you should/can do to work best with ECB in
such a situation:

   * First customize your ECB:

       1. Customize 'ecb-layout-name' to layout-name "top2" (on top) or
          "left9" (on left-side)

       2. Ensure that 'ecb-compile-window-height' is nil.

       3. Optional: Adjust the 'ecb-windows-height' rsp.
          'ecb-windows-width'.

       4. Save your changes.

   * To edit your buffers: Call 'ecb-toggle-ecb-windows' (also available
     via the menu "ECB" and by 'C-c . lw') or 'ecb-hide-ecb-windows' to
     hide the ECB-method buffer so you get all the place of your screen
     for editing.

   * To browse and select functions: Call 'ecb-toggle-ecb-windows' or
     'ecb-show-ecb-windows' to make the ECB-method buffer visible if not
     already.  If you want select a method/variable with the keyboard
     instead with the mouse you should read the section *note Using the
     keyboard:: in this online help!

The possibility of hiding temporally the ECB windows like described
above is also useful for all the other layouts.


File: ecb.info,  Node: Big screens,  Next: Simulating speedbar,  Prev: Small screens,  Up: Tips and tricks

8.3 Working with big screens
============================

ECB offers a layout type "left-right" with special ECB-tree-windows on
the left and right side of the edit-area.  The layouts "leftright1" and
"leftright2"are examples for this layout type.  See *note Creating a new
ECB-layout:: and *note The layout-engine:: for details about how to
create or program more layouts of this type.

Such a layout is eventually the best choice for big screens because the
several ECB-tree-windows are bigger and can display more informations
without scrolling.

With such a layout it can could be senseful to reduce the value of the
option 'ecb-windows-width' compared to layouts of type left or right.  A
value of max.  0.25 should be enough.


File: ecb.info,  Node: Simulating speedbar,  Next: Integrating speedbar,  Prev: Big screens,  Up: Tips and tricks

8.4 Simulating speedbar without an extra frame
==============================================

You can simulate a speedbar-like layout within ONE frame by doing the
following:

  1. Customize 'ecb-layout-name' to layout name "left9", "left12",
     "left13" or "left14" dependent to what you like.

  2. Optional: Ensure that 'ecb-compile-window-height' is nil.

  3. Optional: Adjust the 'ecb-windows-width'.

  4. Optional: Customize 'ecb-toggle-layout-sequence' and toggle very
     fast between several layouts by 'ecb-toggle-layout'.  See the
     doc-strings!

  5. Optional: Customize 'ecb-show-sources-in-directories-buffer' to not
     nil if the chosen layout (see 1.  and 4.)  contains a
     directories-tree-buffer.

  6. Save your changes.

But not only simulating speedbar is possible but also full integrating
it into the ECB and the ECB-frame, *Note Integrating speedbar::.


File: ecb.info,  Node: Integrating speedbar,  Next: Optimize scrolling,  Prev: Simulating speedbar,  Up: Tips and tricks

8.5 Integrating speedbar in the ECB-frame
=========================================

It is very easy to integrate speedbar into ECB. There are two different
ways to do this:

  1. You can either use speedbar in the directories-, sources- or
     methods-window of ECB instead of the built-in directory-, sources-
     or methods-browser of ECB. This can be done via the option
     'ecb-use-speedbar-instead-native-tree-buffer'.

  2. Or you can integrate an extra speedbar-window into a layout
     independent of the existence of a directory-, sources- or
     methods-window.  For this you can either use the built-in layout
     "left-dir-plus-speedbar" or you have to create your own layout
     interactively with the command 'ecb-create-new-layout'.  This way
     is not described in more details because there is nothing more to
     describe - just create your layout.

In general integrating speedbar into the ECB-frame makes sense for
people...

   * ...who like the speedbar way of handling directories and
     source-files but also like the ECB-way of displaying the
     buffer-contents (like methods and variables in a source-file).
     This people should use the option
     'ecb-use-speedbar-instead-native-tree-buffer' and set it to 'dir'.

   * ...who like the speedbar way of browsing things like directories,
     files, file-contents etc.  but who dislike the extra
     speedbar-frame.

Note: It is not necessary to integrate speedbar if you only want parsing
sources not supported by semantic.  From version 1.94 on ECB supports
native parsing and displaying of such sources (*note Non-semantic
sources::)!

Regardless the group you belong, with the speedbar-integration feature
of ECB you can combine both worlds, the speedbar- and the ECB-world:

  1. Choose a layout which either contains a directories- or a
     sources-window but not both of them(1).

     Because speedbar has also display-modes for buffers and info-nodes
     and some other useful things (which can be changed by the
     speedbar-command 'speedbar-change-initial-expansion-list' we
     recommend layouts like "left15" or "leftright3" for using with
     speedbar.

  2. Set the option 'ecb-use-speedbar-instead-native-tree-buffer' to not
     nil.  After this the chosen window of ECB will contain a full
     featured speedbar (the only difference to standard speedbar is not
     residing in an extra frame).

Note: If you belong to the first group of people (s.a.)  a similar
effect and usability is available by setting
'ecb-use-speedbar-instead-native-tree-buffer' to nil and setting
'ecb-show-sources-in-directories-buffer' to not nil, because this
combination displays also directories and sources in one window.

So with the option 'ecb-use-speedbar-instead-native-tree-buffer' you
have the choice which way of displaying and handling "things"
(directories, sources, methods...)  you want (the speedbar- or the
ECB-way).

During speedbar is running within ECB (i.e.
'ecb-use-speedbar-instead-native-tree-buffer' is not nil) the
speedbar-command 'speedbar' is disabled and the speedbar-command
'speedbar-get-focus' switches between the speedbar-window and the
edit-window(2).

*IMPORTANT*: ECB can only integrate speedbar-versions >= 0.14beta1!  If
you use lower versions of speedbar 'ecb-use-speedbar-for-directories'
has no effect.

   ---------- Footnotes ----------

   (1) Only one of them is needed if you use speedbar because speedbar
displays directories and sources in one window.  But if you like wasting
space then you can also use a layout with both windows...

   (2) The standard behavior is switching between the speedbar-frame and
the attached frame, but this make obviously no sense during running
speedbar with ECB.


File: ecb.info,  Node: Optimize scrolling,  Next: Large directories,  Prev: Integrating speedbar,  Up: Tips and tricks

8.6 Optimize scrolling in the edit-window
=========================================

Emacs 20.X seems to slow down scrolling if there is a horizontal split
in the frame and/or a lot of overlays in the buffer which is scrolled.
This is independent of ECB! But because almost all layouts of ECB uses
horizontal splits of the frame and because ECB is based on semantic
which uses overlays intensively there can be poor scrolling performance
in large buffers, especially with java-buffers in 'jde-mode'.

This scrolling performance can be increased a lot if the options
'scroll-conservatively' and 'scroll-step' are set appropriately: The
former one should have a value of 0 during ECB is active and the latter
one a value of either 0 or > 1 (the exact value depends on the power of
your machine).

As far as we know this is not a problem of Emacs 21.X or XEmacs.  With
these versions of Emacs there should be no scrolling problem even with
'scroll-step' has value 1.


File: ecb.info,  Node: Large directories,  Next: Using eshell,  Prev: Optimize scrolling,  Up: Tips and tricks

8.7 Working with large directories
==================================

If 'ecb-source-path' contains directories with many files and subdirs,
especially if these directories are mounted net-drives ("many" means
here something > 500, dependent on the speed of the net-connection and
the machine), actualizing the sources- and/or directories- buffer of ECB
(if displayed in current layout!)  can slow down dramatically.  If this
is a problem the contents of certain directories and also the contents
of the sources-buffer can be cached which increases the speed a lot.
See the option 'ecb-cache-directory-contents'.

IMPORTANT: The full speed-advantage of this cache-mechanism is only
available if 'ecb-show-sources-in-directories-buffer' is 'nil', i.e.
sources of a directory are displayed in the ECB-sources-window.  The
reason is that only with a sources window the tree-buffer contents for
the sources can be cached (i.e.  the buffer-content of the
ECB-sources-window) whereas with sources displayed in the directories
buffer only the disk-contents of a directory are cached - which
increases speed too but not so much as with sources displayed in the
extra window ECB-sources.

The cache of a directory can be only refreshed by a POWER-click (with
mouse or keyboard) onto the related directory-node in the
directories-buffer of ECB (*note Using the mouse::).

See also the option 'ecb-cache-directory-contents-not'.  Here are some
useful settings for both of these options:

   * Cache all directories with more than 500 entries: Set
     'ecb-cache-directory-contents' to ((".*" .  500)) and set
     'ecb-cache-directory-contents-not' to nil.

   * Cache only all directories > 200 beginning with /usr/ Set
     'ecb-cache-directory-contents' to (("^/usr/.*" .  200)) and set
     'ecb-cache-directory-contents-not' to nil.

   * Cache all directories > 500 but NOT these beginning with /usr/: Set
     'ecb-cache-directory-contents' to ((".*" .  500)) and set
     'ecb-cache-directory-contents-not' to ("^/usr/.*").

Another way for getting a faster overlook for large directories with
many source-entries is to apply an online-filter to the sources-buffer.
This can be done via the command 'ecb-sources-filter' or via the
popup-menu of the sources-buffer.


File: ecb.info,  Node: Using eshell,  Next: Grepping directories,  Prev: Large directories,  Up: Tips and tricks

8.8 Optimal using of eshell in ECB
==================================

ECB offers a very smart integration of the "eshell" if you are using a
compile window (*note Temp- and compile-buffers::)(1)

Here is a short summary of provided features:

   * Ability to jump to the eshell buffer within the compilation window
     by simply call 'eshell' (bound to 'C-c . e').  If the eshell isn't
     running it will be started.

   * Expands the compilation window when you run commands.  So for
     example it allows you to view the eshell in minimized mode and then
     when you run "ls" the window automatically expands (but always
     depending of the output of the command you run).

   * Synchronizes the current directory of the eshell with the current
     buffer in the current active edit-window of ECB.

   * Provides smart window layout of the eshell buffer.  This makes sure
     that the eshell is taking up the exact amount of space and that
     nothing is hidden.

Here comes a detailed explanation of these features and how to use it
(all these features are only available if you use a durable
compile-window, i.e.  if 'ecb-compile-window-height' is not nil):

You have not to learn a new command for the eshell-start - just call
'eshell' (for convenience also bound to 'C-c . e') and the eshell will
displayed in the compile-window of ECB (if eshell is not already alive
then it will be started automatically).

ECB tries to display the contents of the eshell-buffer as best as
possible, means ECB can autom.  enlarge and shrink the compile-window so
the contents of the eshell are fitting the window.  See option
'ecb-eshell-enlarge-when-eshell' and
'ecb-eshell-fit-window-to-command-output'.  Normally this is done autom.
but you can also you the standard compile-window enlarging-command of
ECB: 'ecb-toggle-compile-window-height'.

ECB tries also to recenter the eshell-buffer as best as possible.
Normally this is done autom but you can do it on demand with the command
'ecb-eshell-recenter'.

If option 'ecb-eshell-synchronize' is true then ECB always synchronizes
the command prompt of eshell with the directory of current source-buffer
of the current active edit-window.

With the option 'ecb-eshell-auto-activate' you can start eshell autom.
in the compile-window when ECB is started but of course if a
compile-window exists.

   ---------- Footnotes ----------

   (1) Of course you can use eshell also if there is no compile-window.
Then it is just displayed in the edit-area and there is no special
integration.


File: ecb.info,  Node: Grepping directories,  Next: Working with JDEE,  Prev: Using eshell,  Up: Tips and tricks

8.9 Grepping directories with ECB
=================================

ECB offers in the popup-menus in the directories- and
sources-tree-buffer commands for easy (recursive) grepping the current
directory under point (directory-buffer) rsp.  the current-directory
(sources-buffer).  In every case just the function of the options
'ecb-grep-function' rsp.  'ecb-grep-find-function' is called and the
'default-directory' is tempor.  set to the chosen directory so the grep
will performed in this directory regardless of the 'default-directory'
of current buffer in the edit-window.

Other smart things beyond that are not done by ECB, see also
'ecb-grep-function'!

So, how to exclude some subdirectories or files from the grep?

Basically this has to be done with the "-prune" option of the
find-utility: If the standard-grep facility of Emacs is used then this
is not easy but with the library 'igrep.el' there is a convenient way to
exclude things like CVS- or RCS-directories from the find-call: See the
variable 'igrep-find-prune-clause' of the library 'igrep.el'.


File: ecb.info,  Node: Working with JDEE,  Next: Compile-window on demand,  Prev: Grepping directories,  Up: Tips and tricks

8.10 Working best with ECB and JDEE
===================================

ECB is completely language independent, i.e.  it works with any language
supported by semantic (e.g.  C, C++, Java, Elisp etc.).

But there are some special integrations for the great
Java-Development-Environment JDEE:

   * Displaying contents of class under point

     With the command 'ecb-jde-display-class-at-point' you can display
     the contents of the class which contains the definition of the
     "thing" at point (which can be a method, variable etc.).

   * Creating new source-files

     The popup-menus in the directories- and the sources-buffer offer a
     command "Create Source" which allows easy creating new java-sources
     by calling the command 'jde-gen-class-buffer'.

   * Adding user-extensions to the popup-menus

     The options 'ecb-directories-menu-user-extension' and
     'ecb-sources-menu-user-extension'(1) allow adding often used
     JDEE-commands to the popup-menus of the directories- or
     sources-buffer.  One example is to add building the project of
     current directory.  Here is a function which could be added to
     'ecb-directories-menu-user-extension':

          (defun ecb-dir-popup-jde-build (node)
            "Build project in directory."
            (let ((project-file
          	 (expand-file-name jde-ant-buildfile (tree-node-get-data node))))
              (jde-ant-build project-file "build")))

     Of course you can add entries to the option
     'ecb-methods-menu-user-extension' and
     'ecb-methods-menu-user-extension' too.

   ---------- Footnotes ----------

   (1) If you need a dynamic way of menu-extension then you should have
a look at the options 'ecb-directories-menu-user-extension-function' and
'ecb-sources-menu-user-extension-function'.


File: ecb.info,  Node: Compile-window on demand,  Next: Non-semantic sources,  Prev: Working with JDEE,  Up: Tips and tricks

8.11 Displaying the compile-window on demand
============================================

If you like displaying all output of compile/grep/etc.  an all
temp-buffers like *Help*-buffers in an extra compile-window (*note Temp-
and compile-buffers::) but you dislike wasting the space of this
compile-window if you are just editing then you can get a compile-window
"on demand".  Just do the following:

  1. Customize 'ecb-compile-window-height' to not nil and save it for
     future sessions.  This gives you an extra compile-window at the
     bottom.

  2. Add the following to your .emacs:

          (add-hook 'ecb-activate-hook
                    (lambda ()
                      (let ((compwin-buffer (ecb-get-compile-window-buffer)))
                      (if (not (and compwin-buffer
                                    (ecb-compilation-buffer-p compwin-buffer)))
                          (ecb-toggle-compile-window -1)))))

     This hides the extra compile-window direct after the start of ECB
     because there is no need for a compile-window at this moment.  But
     the hiding will not be done if there is a compile-window and if a
     "compile-buffer" in the sense of 'ecb-compilation-buffer-p' is
     displayed in this compile-window.  Without this additional check
     the compile-window would always be hidden after the ECB-start even
     when ECB is reactivated after a deactivation by the
     window-manager-support of ECB (*note Window-managers and ECB::);
     but in these cases we want to preserve the state before
     deactivation as good as possible (see also option
     'ecb-split-edit-window-after-start').

This is all you have to do.  Now if you run 'compile' (or 'grep' or
other compile-modes) or display temp-buffers like *Help*-buffers then
ECB autom.  displays the compile-window at the bottom and display the
output there.

If you have finished with using the compile- or temp-output (e.g.
fixing errors) then you can throw away the compile-window just by
'ecb-toggle-compile-window' - ECB will reactivate it autom.  before next
compilation or help-buffer-display.!


File: ecb.info,  Node: Non-semantic sources,  Next: Hide-show,  Prev: Compile-window on demand,  Up: Tips and tricks

8.12 Parsing and displaying non-semantic sources
================================================

ECB is mostly designed to display parsing information for files
supported by semantic.  But beginning with version 1.94 it also supports
other parsing engines like imenu and etags, so also files not supported
by semantic but by imenu/etags can be displayed in the Method-buffer of
ECB. See *note Definition of semantic- and non-semantic-sources:: for a
description of "semantic-sources" and "non-semantic-sources".

If support of non-semantic-sources is enabled then ECB will display the
contents of all sources which can be displayed by speedbar too.  This
comes from the fact that ECB uses speedbar-logic to parse sources with
imenu or etags.

In most cases imenu-parsing is preferable over etags-parsing because
imenu operates on Emacs-buffers and needs no external tool and therefore
parsing works also if current contents of a buffer are not saved to
disk.

This section describes all important aspects about parsing and
displaying file-contents of file-types not supported by semantic but by
imenu and/or etags.

8.12.1 Enabling parsing and displaying of non-semantic-sources
--------------------------------------------------------------

Enabling is simply done with the option
'ecb-process-non-semantic-files'.

ECB offers an option 'ecb-non-semantic-parsing-function' to specify on a
major-mode basis which parsing-method should be used: imenu or etags.
Normally there should be no need to change this option but read the
documentation of this option (*note ecb-non-semantic::) for further
details.

IMPORTANT:

   * If imenu-parsing should be used then the option
     'speedbar-use-imenu-flag' must be set to not 'nil'!

   * If some non-semantic-sources are not parsed (i.e.  there is an
     empty Methods-buffer) and you think that they should then maybe
     they are neither supported by imenu nor by etags or you have to
     check the options 'ecb-non-semantic-parsing-function' and
     'speedbar-dynamic-tags-function-list' and - especially for etags -
     'speedbar-fetch-etags-parse-list', 'speedbar-fetch-etags-arguments'
     and 'speedbar-fetch-etags-command'.

   * Even with support for semantic-, imenu- and etags-parsing there
     will remain some file-types rsp.  'major-modes' which are not
     parse-able, neither by semantic, imenu nor etags.  This is no
     problem because these files simply have an empty Methods-buffer.
     But nevertheless you will get a message "Sorry, no support for a
     file of that extension" which comes from the speedbar-library and
     can not switched off.  Therefore if a 'major-mode' is known as not
     parse-able by semantic, imenu or etags it can be added to the
     option 'ecb-non-semantic-exclude-modes' and then it will be
     excluded from being tried to parsed and this (annoying) message
     will not occur.

8.12.2 Automatic rescanning/reparsing of non-semantic-sources
-------------------------------------------------------------

In contrast to semantic (see 'global-semantic-auto-parse-mode') there is
no built-in mechanism for autom.  reparsing non-semantic-sources and
then updating the contents of the Methods-buffer.

For non-semantic-sources you have always at least to call
'ecb-rebuild-methods-buffer' (bound to 'C-c . r') or saving the
source-file (if 'ecb-auto-update-methods-after-save' is true) to update
the Method-buffer(1).

Depending on the parsing-mechanism the following options have to be
switched on so ECB can rebuild the methods-buffer for
non-semantic-sources:

   * imenu:

     The imenu-option 'imenu-auto-rescan' must be enabled and
     'imenu-auto-rescan-maxout' has to be set big enough to auto-parse
     big files too!  But this results not directly in an autom.  updated
     Method-buffer.  This is first done after calling the command
     'ecb-rebuild-methods-buffer' or saving the source-file (if
     'ecb-auto-update-methods-after-save' is true).

   * etags:

     Only if 'ecb-auto-save-before-etags-methods-rebuild' is switched on
     the command 'ecb-rebuild-methods-buffer' rebuilds the method-buffer
     with current source-contents.  See description of this option for
     an explanation.

Tip: If you want to program your own real.  automatic
rescan/reparse/rebuild mechanism for non-semantic-sources you can do:

Adding to 'after-change-functions' a function F which either runs itself
'ecb-rebuild-methods-buffer-for-non-semantic' or which adds only another
function FF to an idle-timer and the function FF runs
'ecb-rebuild-methods-buffer-for-non-semantic'.  The latter approach has
the advantage that the reparse/rebuild is not performed immediately
after every change but first after Emacs is idle for a senseful interval
(e.g.  4 seconds) after last change.  Of course the function FF has to
cancel its own idle-timer at the end, so the next idle-timer is first
started again after the next change (i.e.  by function F which is still
contained in 'after-change-functions'.

8.12.3 Customizing the display of the tags
------------------------------------------

For non-semantic-sources ECB uses does no special organizing of tags in
groups and sub-tags but it completely uses the tag-hierarchy the imenu-
and etags-parsers of speedbar return.  So the displayed tag hierarchy
can only be customized with some options speedbar offers for this:

'speedbar-tag-hierarchy-method',
'speedbar-tag-group-name-minimum-length',
'speedbar-tag-split-minimum-length' and
'speedbar-tag-regroup-maximum-length'.  See the speedbar documentation
for details about these options.

With the option 'ecb-method-non-semantic-face' you can define the face
used for displaying the tags in the Method-buffer for
non-semantic-sources.

'ecb-non-semantic-methods-initial-expand' can be useful too.

   ---------- Footnotes ----------

   (1) Maybe future versions of ECB (> 1.94) will offer an autom.
mechanism for this.


File: ecb.info,  Node: Hide-show,  Next: Window-managers and ECB,  Prev: Non-semantic sources,  Up: Tips and tricks

8.13 Using hide-show from the methods-buffer-menu
=================================================

The popup-menu of the Methods-buffer offer two entries for either hiding
or showing the block which is related to the selected tag (that tag for
which the popup-menu was opened):

   * "Jump to tag and hide block": Jumps to the tag and calls
     'hs-hide-block' from the hideshow-library which is shipped with
     (X)Emacs.  After that the block is hidden, i.e.  only the
     header-line of that tag (method, variable etc.)  is visible, the
     rest is hidden behind the "...".

   * "Jump to tag and show block": Jumps to the tag and calls
     'hs-show-block'.  This shows the related hidden block if the block
     was hidden via 'hs-hide-block' or the menu-entry "Jump to tag and
     hide block" (s.a.).

For this feature the library 'hideshow.el' is used which should normally
being included in the (X)Emacs-distribution.  If this library is not
loaded into Emacs, ECB does this automatically before the first call to
one of these menu-entries.

IMPORTANT: If in some 'major-mode' hiding and showing does not work as
you expect it to work then you must probably add an entry for this
'major-mode' to the hideshow-variable 'hs-special-modes-alist'.  See the
documentation of this variable for further details.  One example of such
a 'major-mode' is 'jde-mode' of the Java Development Environment JDEE;
just add an entry for it like the already contained entries for
'c++-mode' or 'java-mode' and hiding and showing will work for you with
JDEE too.


File: ecb.info,  Node: Window-managers and ECB,  Next: Tree-buffer styles,  Prev: Hide-show,  Up: Tips and tricks

8.14 Support of several Emacs-window-managers
=============================================

There are several window-managers available which offer an easy
interface to jump between different window-configurations within the
same frame.  A window configuration is the layout of windows and
associated buffers within a frame.  There is always at least one
configuration, the current configuration.  You can create new
configurations and cycle through the layouts in either direction.
Window configurations are often named or numbered, and you can jump to
and delete named rsp.  numbered configurations.

Without special support by ECB these window-managers would not work in
combination with ECB!

ECB currently supports the following managers:

   * winring.el: Written by Barry A. Warsaw <bwarsaw@python.org>,
     available at <http://www.python.org/emacs/>

   * escreen.el: Written by Noah Friedman <friedman@splode.com>,
     available at <http://www.splode.com/~friedman/software/emacs-lisp/>

*IMPORTANT*: With one of these window-managers installed and active you
can run applications like Gnus, VM or BBDB in the same frame as ECB!
Just use different window-configurations (winring.el) or escreens
(escreen.el) for ECB and the other applications.  Especially with
winring.el you can give every configuration a descriptive name like
"ECB" or "Gnus"; afterwards you can jump to a window-configuration by
name!

When you go back to the ECB-window-configuration (winring.el) or the
ECB-escreen (escreen.el) with any of the special window-manager-commands
then the state of ECB will be restored exactly as you have left it when
going to another window-configuration rsp.  escreen.  This includes the
whole splitting state of the edit-area and the visibilty of the
ecb-windows and of the compile-window!

The rest of this section describes how to enable the special ECB-support
for these window-managers and how to use them.

8.14.1 Enabling of the support
------------------------------

Every support must be enabled explicitly:
   * winring: Call 'ecb-winman-winring-enable-support'.  This *MUST* be
     done *BEFORE* the first call to any winring-command, so also before
     calling 'winring-initialize'!

   * escreen: Call 'ecb-winman-escreen-enable-support'.  This *MUST* be
     done *BEFORE* the first call to any escreen-command, so also before
     calling 'escreen-install'!

If a window-manager-support should be enabled autom.  after Emacs-start
just put the following into your '.emacs':

     (ecb-winman-winring-enable-support)
     (winring-initialize)

     ;; or - if you like escreen more

     (ecb-winman-escreen-enable-support)
     (escreen-install)

8.14.2 Usage of a window-manager in combination with ECB
--------------------------------------------------------

After enabling the support of one of the supported window-managers just
go on as described in the commentary or introduction of the respective
library-file(s) of the window-manager.  Here is a short description:

   * winring: First you have to define how to identify the
     ECB-window-configuration, i.e.  the configuration with activated
     ECB. This done with the option 'ecb-winman-winring-name'.  There is
     always only one window-configurations with name
     'ecb-winman-winring-name'!

     Then run 'winring-initialize'.  If ECB is active then the resulting
     window-configuration is the ECB-window-configuration.  Otherwise
     you can create the ECB-window-configuration when you first time
     call 'winring-new-configuration' with name equal to
     'ecb-winman-winring-name'.  In general you can run all commands of
     the winring-library.  If you jump to the ECB-window-configuration
     then ECB will be autom.  activated and if you leave the
     ECB-window-configuration then ECB will autom.  deactivated.

   * escreen: First you have to define how to identify the ECB-escreen
     i.e.  that escreen with activated ECB. This done with the option
     'ecb-winman-escreen-number'.  There is always only one escreen with
     number 'ecb-winman-escreen-number'!

     Then run 'escreen-install' (deactivates ECB if currently running).
     After that you can call 'escreen-create-screen' and
     'escreen-goto-screen'(1).  These commands autom.  activate ECB if
     creating or selecting the escreen with number 'ecb-escreen-number'
     (default = 1) and autom.  deactivate ECB if leaving the
     ECB-escreen.

8.14.3 Disabling the support
----------------------------

There is normally no need to do this but nevertheless it can be done by
'ecb-winman-escreen-disable-support' rsp.
'ecb-winman-winring-disable-support'.

   ---------- Footnotes ----------

   (1) And of course all other 'escreen-goto-*' commands!


File: ecb.info,  Node: Tree-buffer styles,  Next: Using semanticdb,  Prev: Window-managers and ECB,  Up: Tips and tricks

8.15 Displaying the trees of the ECB-windows with different styles
==================================================================

ECB offers three different styles for the tree-buffers in the
ECB-windows.  Two of the styles are ascii-based and one style uses
images for drawing the tree-structure.

* Menu:

* Style basics::                Basic knowledge about the styles
* Ascii-based styles::          How to customize the ascii-styles
* Tree-buffers with images::    Which images are used for the tree
* Images for Methods-buffer::   Images for the tags in the Methods-buffer


File: ecb.info,  Node: Style basics,  Next: Ascii-based styles,  Up: Tree-buffer styles

8.15.1 Basic knowledge about the styles
---------------------------------------

There are nine image-names which define the control- and guide-symbols
to draw the tree.  Here is the list of the allowed image-names and the
related corresponding ascii-symbols:

   - open ("[-]"): The control-symbol displayed for an opened tree-node
     which has several subnodes.  Clicking onto this control closes the
     node.

   - close ("[+]"): The control-symbol displayed for a closed tree-node,
     i.e.  an expandable node with subnodes but all subnodes are hidden.
     Clicking onto this control opened the node and displays its
     subnodes - if there are any.  If it has no subnodes the
     empty-symbol will be displayed.

   - empty ("[x]"): The symbol displayed for an empty node.  An empty
     node is a node which could have subnodes but has currently none.

   - leaf ("*"): The symbol displayed for a node which can not have any
     subnodes so it is a "leaf" in the tree.

   - guide (" |"): The symbol used for drawing vertical "guide-lines"
     for opened nodes.  See the example below.

   - no-guide (" "): Sometimes invisible guide-lines are needed to draw
     the tree.

   - end-guide (" '"): The symbol used for the guide-line of the last
     subnode of an opened node.

   - handle ("-"): The symbol displayed before every subnode.  Each
     handle is connected to a guide-line - either a normal guide or an
     end-guide.

   - no-handle (" "): An invisible handle.

A tree will be build-up with these elements like follows:

     [-] node-with-subnodes      (open)
      |-[+] not-empty-subnode1   (guide+handle+close)
      |-[X] empty-subnode        (guide+handle+empty)
      `-[-] not-empty-subnode2   (end-guide+handle+open)
         |-* leaf-1              (no-guide+no-handle+guide+handle+leaf)
         `-* leaf-2              (no-guide+no-handle+end-guide+handle+leaf)


File: ecb.info,  Node: Ascii-based styles,  Next: Tree-buffers with images,  Prev: Style basics,  Up: Tree-buffer styles

8.15.2 How to customize the ascii-styles
----------------------------------------

The ECB-option 'ecb-tree-buffer-style' offers two different styles
completely drawn with ascii-controls and -guides.

Ascii-style with guide-lines (value 'ascii-guides')(1):

     [-] ECB
      |  [+] code-save
      `- [-] ecb-images
          |  [-] directories
          |   |  [-] height-15
          |   |   |  * close.xpm
          |   |   |  * empty.xpm
          |   |   |  * leaf.xpm
          |   |   `- * open.xpm
          |   |  [+] height-17
          |   |  [+] height-19
          |   `- [+] height-21
          |  [x] history
          |  [x] methods
          `- [x] sources

Ascii-style without guide-lines (value 'ascii-no-guides') - this is the
style used by ECB <= 1.96:

     [-] ECB
         [+] code-save
         [-] ecb-images
             [-] directories
                 [-] height-15
                     * close.xpm
                     * empty.xpm
                     * leaf.xpm
                     * open.xpm
                 [+] height-17
                 [+] height-19
                 [+] height-21
             [x] history
             [x] methods
             [x] sources

The tree-layout of both ascii-styles can be affected with the options
'ecb-tree-indent' and 'ecb-tree-expand-symbol-before' (the examples
above have set 4 for the former and true for the latter one).  For the
guide-style the face and color of the guide- and handle-symbols can be
customized with the option 'ecb-tree-guide-line-face' (default is the
equal-named face).

   ---------- Footnotes ----------

   (1) For a better look&feel of such a tree-buffer ECB displays only
the last subnode of an opened node with a handle!


File: ecb.info,  Node: Tree-buffers with images,  Next: Images for Methods-buffer,  Prev: Ascii-based styles,  Up: Tree-buffer styles

8.15.3 Which images are used for the tree
-----------------------------------------

Depending on the value of 'ecb-tree-buffer-style' and the image-support
of (X)Emacs, the tree-buffer try to use images instead of strings to
draw a nice-looking tree.  If images can and should be used then the
option 'ecb-tree-image-icons-directories' tells ECB where to search for
suitable image-icons for each of the nine image-names (see above).  An
image is used for displaying a control with name "XXX" if one of the
directories of 'ecb-tree-image-icons-directories' contains an image-file
with basename "ecb-XXX" and an extension which is supported by (X)Emacs.
Currently supported extensions are ".xpm", ".png", ".gif", ".jpeg",
."jpg" and ".xbm".

Example: To display the control with name "open" with a suitable image
then one of the directories of 'ecb-tree-image-icons-directories' must
contain a file with name "ecb-open.xpm" or "ecb-open.png" etc.  See the
description of this option to get all important details how and in which
sequence ECB searches the directories of
'ecb-tree-image-icons-directories'.

ECB comes with predefined default-images usable for every tree-buffer
and special images for the Directories- and the Methods-tree-buffer.
They are defined in several different heights - so for the most senseful
font-heights of a tree-buffer a fitting image-size should be available.
The shipped images reside either in the subdirectory "ecb-images" of the
ECB-installation or - if ECB is installed as regular XEmacs-package - in
the ECB-etc data-directory (the directory returned by evaluating
(locate-data-directory "ecb").  If you do not want to change the images
then you normally have nothing to do because the default value of
'ecb-tree-image-icons-directories' points already to the correct
image-directories.

8.15.3.1 A special note for XEmacs
..................................

At least XEmacs 21.14 (but probably previous versions too) has a bug in
its display-engine which prevents adjacent images to be displayed
correctly.  The effect is, that in a row of two or more adjacent images
(e.g.  end-guide+handle+open - see the tree-example above) always all
images are masked by the last one, means only the last one is visible.
If at least one normal character (e.g.  a space) is placed between two
images then the images are displayed correctly.  Therefore ECB has
implemented the following work-around to get best possible results with
XEmacs: open-, close-, empty-, leaf-, guide-, end-guide- and
no-guide-images are displayed with images and the handle- and the
no-handle-images are displayed with the corresponding ascii-symbols
(which is "-" rsp.  " ").  The face (the color) of the handle-symbol is
customizable via the option 'ecb-tree-guide-line-face'.

This bug is already reported to the XEmacs-team.  If your XEmacs has
fixed this bug then add the following to your '.emacs'-file (or
whereever your emacs-setup is located):

     (setq tree-buffer-enable-xemacs-image-bug-hack nil)

Then ECB uses images without any special work-around with XEmacs too.
Just try it - if the tree-buffers look ugly then the XEmacs-bug is
probably not fixed correctly.

8.15.4 Special images for the Methods-buffer
--------------------------------------------


File: ecb.info,  Node: Images for Methods-buffer,  Prev: Tree-buffers with images,  Up: Tree-buffer styles

ECB can display all the semantic-tags in the Method-buffer with special
icons for methods, variables and classes - each of them with a different
icon dependend of the protection of the tag.  This feature can be
disabled/enabled via the option
'ecb-display-image-icons-for-semantic-tags'.  All the special images are
located in that directory where the option
'ecb-tree-image-icons-directories' point to for methods.


File: ecb.info,  Node: Using semanticdb,  Prev: Tree-buffer styles,  Up: Tips and tricks

8.16 Using semanticdb to jump to type-tags defined in other files
=================================================================

In OO-languages like CLOS, eieio and C++ there can be type-tags in the
method-buffer which are somehow virtual because there is no definition
in the current source-file.  But such a virtual type collects all its
outside defined members like methods in C++ which are defined in the
'*.cc' file whereas the class-definition is defined in the associated
header-file.  ECB uses semanticdb to open the definition-file of such a
tag and to jump to the definition of this tag.  Same for parent-tags in
the methods-buffer.  This feature can only work correctly if semanticdb
is well configured!

Here is a C++-example:

This class is defined in a file 'ParentClass.h':

     class ParentClass
     {
     protected:
       int p;
     };

This class is defined in a file 'ClassWithExternals.h'

     #include "ParentClass.h"

     class ClassWithExternals : public ParentClass
     {
     private:
       int i;

     public:
       ClassWithExternals();
       ~ClassWithExternals();
     };

Both the constructor and the desctructor of the class
"ClassWithExternals" are defined in a file 'ClassWithExternals.cc':

     #include "test.h"

     ClassWithExternals::ClassWithExternals(int i,
                                            boolean b,
                                            char c)
     {
       return;
     }

     void
     ClassWithExternals::~ClassWithExternals()
     {
       return;
     }

ECB displays the contents of 'ClassWithExternals.cc' in its
methods-buffer like follows:

     [-] [Includes]
      `- test.h
     [-] ClassWithExternals
      |  +ClassWithExternals (+i:int, +b:class boolean, +c:char):ClassWithExternals
      `- +~ClassWithExternals ():void

Both the constructor and the desctructor of the class
"ClassWithExternals" are grouped under their class-type.  ECB now uses
semanticdb to jump to the definition of class "ClassWithExternals" when
you click onto the type-node "ClassWithExternals" in the methods-buffer.

The contents of 'ClassWithExternals.h' are displayed like follows:

     [-] [Includes]
      `- ParentClass.h
     [-] ClassWithExternals:class
      |  [-] [Parents]
      |   `- ParentClass
      |  [-] [Variables]
      |   `- -i:int
      |  +ClassWithExternals ():ClassWithExternals
      |  +~ClassWithExternals ():void
      `- [+] [Misc]

ECB uses semanticdb to jump to the definition of the class "ParentClass"
when you click onto the node "ParentClass".

To enable this feature 'global-semanticdb-minor-mode' must be enabled
and semanticdb must be correctly configured.  This means mainly that the
option 'semanticdb-project-roots' must be setup well.  See the manual of
semanticdb for further informations about this.


File: ecb.info,  Node: Elisp programming,  Next: Conflicts and bugs,  Prev: Tips and tricks,  Up: Top

9 Entry points for Elisp programmers
************************************

This chapter describes how ECB can be used/programmed/driven by an
Elisp-program.  This contains:

* Menu:

* List of variables::           Which variables an Elisp-program can use
* List of hooks::               All available hooks
* tree-buffer::                 Some words to the tree-buffer-library
* Adviced functions::           How to deal with the adviced functions
* The layout-engine::           Programming new layouts and special windows


File: ecb.info,  Node: List of variables,  Next: List of hooks,  Prev: Elisp programming,  Up: Elisp programming

9.1 Variables for Elisp-programs
================================

Variables an Elisp-program can use beyond those ones mentioned in *note
The layout-engine:::

   * 'ecb-source-path-functions'

Look at the documentation of these variables to get a description.


File: ecb.info,  Node: List of hooks,  Next: tree-buffer,  Prev: List of variables,  Up: Elisp programming

9.2 Available hooks of ECB
==========================

The following hooks are available:

   * 'ecb-activate-before-new-frame-created-hook'
   * 'ecb-activate-before-layout-draw-hook'
   * 'ecb-activate-hook'
   * 'ecb-before-activate-hook'
   * 'ecb-before-deactivate-hook'
   * 'ecb-common-tree-buffer-after-create-hook'
   * 'ecb-current-buffer-sync-hook'
   * 'ecb-deactivate-hook'
   * 'ecb-directories-buffer-after-create-hook'
   * 'ecb-hide-ecb-windows-after-hook'
   * 'ecb-hide-ecb-windows-before-hook'
   * 'ecb-history-buffer-after-create-hook'
   * 'ecb-methods-buffer-after-create-hook'
   * 'ecb-redraw-layout-after-hook'
   * 'ecb-redraw-layout-before-hook'
   * 'ecb-show-ecb-windows-after-hook'
   * 'ecb-show-ecb-windows-before-hook'
   * 'ecb-sources-buffer-after-create-hook'

Look at the documentation of these hooks to get a detailed description.


File: ecb.info,  Node: tree-buffer,  Next: Adviced functions,  Prev: List of hooks,  Up: Elisp programming

9.3 The library tree-buffer.el
==============================

The library tree-buffer.el is ECB independent and can be used for other
applications too.  But such an application is not allowed to use any of
the variables of tree-buffer.el especially not the variable
*tree-buffers*!

'tree-buffers': Only for internal use.  It contains all tree-buffers of
current Emacs-instance, means *all* tree-buffers of *all* applications
which uses currently tree-buffers.  Every application must store its own
collection of tree-buffers in an own variable!  For example: ECB stores
its tree-buffer set in 'ecb-tree-buffers'!

An application may only use the methods tree-buffer.el provides but no
internal variables!


File: ecb.info,  Node: Adviced functions,  Next: The layout-engine,  Prev: tree-buffer,  Up: Elisp programming

9.4 How to deal with the adviced window-functions
=================================================

ECB offers for packages which work during activated ECB three macros for
easy temporally(1) using all original-functions, all adviced functions
or only some adviced functions:

   - 'ecb-with-original-functions'
   - 'ecb-with-adviced-functions'
   - 'ecb-with-some-adviced-functions'

For a detailed explanation of each macro read the documentation with
'describe-function'!

   ---------- Footnotes ----------

   (1) I.e.  regardless of the settings in
'ecb-advice-window-functions'!


File: ecb.info,  Node: The layout-engine,  Prev: Adviced functions,  Up: Elisp programming

9.5 How to program new layouts and new special windows
======================================================

There are two aspects concerning this topic:

  1. Programming a new layout which contains several special ECB-windows
     like directories, sources, methods, history or other special
     windows and arranging them in a new outline.

  2. Creating complete new special windows (e.g.  a local-variable
     window for a graphical debugger like JDEbug of JDEE), adding them
     to a layout and synchronizing them with the current active
     edit-window.

The former one covers merely the layout-programming aspect which is
explained in the first subsection of this chapter whereas the latter one
covers all aspects of creating new special windows and what is necessary
to synchronize it with the current active edit-window of ECB. This is
explained in the second subsection which will refers to the first
subsection.

* Menu:

* Programming a new layout::    How to program a new layout
* Programming special windows:: Aspects of programming special windows
* Possible layout-outlines::    The wide range of possible layouts
* The layout-engine API::       The complete layout-engine API


File: ecb.info,  Node: Programming a new layout,  Next: Programming special windows,  Prev: The layout-engine,  Up: The layout-engine

9.5.1 How to program a new layout
---------------------------------

If you just want creating a new layout with the standard ECB-windows
like directories, sources, methods, history and speedbar it's is
strongly recommended to define the new layout interactively with the
command 'ecb-create-new-layout' (*note Creating a new ECB-layout::).

If you want creating a new layout and if this layout should contain
other special windows than the standard ECB-windows then it's still
recommended to define this layout interactively with
'ecb-create-new-layout' and using the option to give the created windows
user-defined types.  For every user defined type you have then just to
program the necessary buffer-set function.  For all the details see
*note Creating a new ECB-layout::.

But if you do not like the interactive way (because you are tough and
brave) but you want programming the new layout with Elisp then use the
macro 'ecb-layout-define' (the following definition has stripped the
prefix "ecb-" for better indexing this manual):

 -- Macro: layout-define name type &rest create-code
     Creates a new ECB-layout with name NAME.  TYPE is the type of the
     new layout and is literal, i.e.  not evaluated.  It can be left,
     right, top or left-right.  DOC is the docstring for the new
     layout-function "ecb-layout-function-<name>".  CREATE-CODE is all
     the lisp code which is necessary to define the ECB-windows/buffers.
     This macro adds the layout with NAME and TYPEto the internal
     variable 'ecb-available-layouts'.

     Preconditions for CREATE-CODE:
       1. Current frame is splitted at least in one edit-window and the
          "column" (for layout types left, right and left-right) rsp.
          "row" (for a top layout) for the special ECB-windows/buffers.
          The width of the "column" rsp.  the height of the "row" is
          always defined with the option 'ecb-windows-width' rsp.
          'ecb-windows-height'.  Depending on the value of the option
          'ecb-compile-window-height' there is also a compile window at
          the bottom of the frame which is stored in
          'ecb-compile-window'.

       2. All windows are not dedicated.

       3. Neither the edit-window nor the compile-window (if there is
          one) are selected for types left, right and top.  For type
          left-right the left column-window is selected

       4. All ECB-advices for the functions in
          'ecb-advice-window-functions' are disabled!

     Things CREATE-CODE has to do:
       1. Splitting the ECB-tree-windows-column(s)/row (s.a.)  in all
          the ECB-windows the layout should contain (directories,
          sources, methods and history).  The split must not be done
          with other functions than 'ecb-split-hor' and 'ecb-split-ver'!
          It is recommended not to to use a "hard" number of split-lines
          or -rows but using fractions between -0.9 and +0.9!  Tip: It
          is recommended to spilt from right to left and from bottom to
          top or with other words: First create the right-most and
          bottom-most special windows!

       2. Making each special ECB-window a dedicated window.  This can
          be done with one of the following functions:
             - 'ecb-set-directories-buffer'
             - 'ecb-set-sources-buffer'
             - 'ecb-set-methods-buffer'
             - 'ecb-set-history-buffer'
             - 'ecb-set-speedbar-buffer'
          Each layout can only contain one of each tree-buffer-type!

          In addition to these functions there is a general macro
          'ecb-with-dedicated-window'.  This macro performs any
          arbitrary code in current window and makes the window autom.
          dedicated at the end.  This can be used by third party
          packages like JDEE to create arbitrary ECB-windows besides the
          standard tree-windows.

          To make a special ECB-window a dedicated window either one of
          the five functions above must be used or a function(!)  which
          calls in turn the macro 'ecb-with-dedicated-window'.  See the
          documentation of this macro how to use it!

          Such a function is called a "dedicated setter" and must(!)
          use 'ecb-with-dedicated-window' to make the window dedicated!

       3. Every(!)  special ECB-window must be dedicated as described in
          2.

       4. CREATE-CODE must work correctly regardless if there is already
          a compile-window (stored in 'ecb-compile-window') or not
          ('ecb-compile-window' is nil).

     Things CREATE-CODE can do or can use:
       1. The value of 'ecb-compile-window' which contains the
          compile-window (if there is one).  Using the values of
          'ecb-compile-window-height', 'ecb-windows-width',
          'ecb-windows-height'.

     Things CREATE-CODE must NOT do:
       1. Splitting the edit-window
       2. Creating a compile-window
       3. Deleting the edit-window, the compile-window (if there is any)
          or the ECB-windows-column(s)/row (see Precondition 1.)
       4. Referring to the value of 'ecb-edit-window' because this is
          always nil during CREATE-CODE.

     Postconditions for CREATE-CODE:
       1. The edit-window must be the selected window and must not be
          dedicated and not be splitted.

       2. Every window besides the edit-window \(and the compile-window)
          must be a dedicated window \(e.g.  a ECB-tree-window).

Use this macro to program new layouts within your '.emacs' or any other
file which is loaded into your Emacs.  After loading the file(s) with
all the new layout-definitions you can use it by customizing the option
'ecb-layout-name' to the appropriate name or with the command
'ecb-change-layout'.

With the function 'ecb-layout-undefine' you can remove a layout from the
list of available layouts:

 -- Function: layout-undefine name
     Unbind ecb-layout-function-<NAME> and
     ecb-delete-window-ecb-windows-<NAME> and remove 'NAME' from
     'ecb-available-layouts'.

Here is an example for a new layout programmed with 'ecb-layout-define':

     (ecb-layout-define "my-own-layout" left nil
       ;; The frame is already splitted side-by-side and point stays in the
       ;; left window (= the ECB-tree-window-column)

       ;; Here is the creation code for the new layout

       ;; 1. Defining the current window/buffer as ECB-methods buffer
       (ecb-set-methods-buffer)
       ;; 2. Splitting the ECB-tree-windows-column in two windows
       (ecb-split-ver 0.75 t)
       ;; 3. Go to the second window
       (other-window 1)
       ;; 4. Defining the current window/buffer as ECB-history buffer
       (ecb-set-history-buffer)
       ;; 5. Make the ECB-edit-window current (see Postcondition above)
       (select-window (next-window)))

This layout definition defines a layout with name "my-own-layout" which
looks like:

     -------------------------------------------------------
     |              |                                      |
     |              |                                      |
     |              |                                      |
     |  Methods     |                                      |
     |              |                                      |
     |              |                                      |
     |              |               Edit                   |
     |              |                                      |
     |              |                                      |
     |--------------|                                      |
     |              |                                      |
     |  History     |                                      |
     |              |                                      |
     -------------------------------------------------------
     |                                                     |
     |                    Compilation                      |
     |                                                     |
     -------------------------------------------------------


File: ecb.info,  Node: Programming special windows,  Next: Possible layout-outlines,  Prev: Programming a new layout,  Up: The layout-engine

9.5.2 All aspects of programming special windows
------------------------------------------------

ECB offers a flexible programmable layout-engine for other packages to
display their own contents and informations in special ECB-windows.  An
example could be a graphical debugger which offers a special window for
displaying local variables and another special window for messages from
the debugger-process (like JDEbug of JDEE(1)).

This section explains all aspects of programming new special windows,
adding them to a new layout and synchronizing them with edit-window of
ECB. This can be done best with an easy example which nevertheless
covers all necessary aspects to be a good example and skeleton for
complex tools (like a graphical debugger) which want to use the
layout-engine of ECB do display their own information.

Here comes the example:

9.5.2.1 The outline of the example layout:
..........................................

     -------------------------------------------------------
     |Bufferinfo for <filename>:            |[prior]       |
     |Type: file                            |[next]        |
     |Size: 23456                           |              |
     |Modes: rw-rw-rw-                      |              |
     |-----------------------------------------------------|
     |                                                     |
     |                                                     |
     |                                                     |
     |                                                     |
     |                 edit-window                         |
     |                                                     |
     |                                                     |
     |                                                     |
     |                                                     |
     -------------------------------------------------------
     |                                                     |
     |                 compilation-window                  |
     |                                                     |
     -------------------------------------------------------

9.5.2.2 The description of the layout-contents
..............................................

The top-left window always displays informations about the current
buffer in the selected edit-window.  This window demonstrates how autom.
synchronizing a special window/buffer of a layout with current
edit-window.

The top-right window contains an read-only "action-buffer" and offers
two buttons which can be used with the middle mouse-button to scroll the
edit-window.  This is not very senseful but it demonstrates how to
control the edit-window with actions performed in a special
window/buffer of a layout.

(If you have not set a compilation-window in 'ecb-compile-window-height'
then the layout contains no durable compilation window and the other
windows get a little more place).

9.5.2.3 The example code
........................

Now let have us a look at the several parts of the Elisp-program needed
to program this new example layout.  ECB contains a library
'ecb-examples.el' which contains the full working code of this example.
To test this example and to play with it you can load this library into
Emacs (with 'load-library' for example) and then calling
'ecb-change-layout' (bound to 'C-c . lc') and inserting
"example-layout1" as layout-name.  An alternative is calling
'ecb-examples-activate' and 'ecb-examples-deactivate'.  For details see
file 'ecb-examples.el'.

The following steps only contain code-skeletons to demonstrate the
principle.  The full working code is available in 'ecb-examples.el'.

9.5.2.4 The bufferinfo buffer of the example
............................................

The name of the bufferinfo buffer:

     (defconst ecb-examples-bufferinfo-buffer-name " *ECB buffer info*")

Two helper functions for displaying infos in a special buffer:

     (defun ecb-examples-print-file-attributes (buffer filename)
       (ecb-with-readonly-buffer buffer
         (erase-buffer)
         (insert (format "Bufferinfo for %s:\n\n" filename))
         ;; insert with the function `file-attributes' some
         ;; informations about FILENAME.
         ))

     (defun ecb-examples-print-non-filebuffer (buffer buffer-name)
       (ecb-with-readonly-buffer buffer
         (erase-buffer)
         ;; analogous to `ecb-examples-print-file-attributes'
         ))

The main synchronizing function added to 'ecb-current-buffer-sync-hook'
for autom.  evaluation by 'ecb-current-buffer-sync' which runs dependent
on the values of 'ecb-window-sync' and 'ecb-window-sync-delay'.  This
function synchronizes the bufferinfo buffer with the current buffer of
the edit-window if that buffer has changed.

     (defun ecb-examples-bufferinfo-sync ()
       (ecb-do-if-buffer-visible-in-ecb-frame
           'ecb-examples-bufferinfo-buffer-name

         ;; here we can be sure that the buffer with name
         ;; `ecb-examples-bufferinfo-buffer-name' is displayed in a
         ;; window of `ecb-frame'

         ;; The macro `ecb-do-if-buffer-visible-in-ecb-frame' locally
         ;; binds the variables visible-buffer and visible-window!! See
         ;; documentation of this macro!

         (let ((filename (buffer-file-name (current-buffer))))

           (if (and filename (file-readable-p filename))

               ;; real filebuffers
               ;; here we could add a smarter mechanism;
               ;; see ecb-examples.el
               (ecb-examples-print-file-attributes visible-buffer
                                                   filename)

             ;; non file buffers like help-buffers etc...
             (setq ecb-examples-bufferinfo-last-file nil)
             (ecb-examples-print-non-filebuffer visible-buffer
                                                (buffer-name
                                                  (current-buffer)))
             ))))

The function which makes the bufferinfo-buffer dedicated to a window.

     (defun ecb-examples-set-bufferinfo-buffer ()
       (ecb-with-dedicated-window
           ecb-examples-bufferinfo-buffer-name
           'ecb-examples-set-bufferinfo-buffer
         (switch-to-buffer (get-buffer-create
                            ecb-examples-bufferinfo-buffer-name))
         (setq buffer-read-only t)))

This is all what we need for the special bufferinfo buffer.  We have
demonstrated already three of the important functions/macros of the
layout-engine API of ECB: 'ecb-with-readonly-buffer',
'ecb-do-if-buffer-visible-in-ecb-frame' and 'ecb-with-dedicated-window'
(*note The layout-engine API::.  Especially the second macro is strongly
recommended for programming good synchronizing functions which do not
waste CPU!

9.5.2.5 The action buffer of the example
........................................

The name of the action-buffer:

     (defconst ecb-examples-action-buffer-name " *ECB action buffer*")

Two helper functions for creating a readonly action-buffer with a
special local key-map for the middle-mouse-button and two buttons
[prior] and [next]:

     (defun ecb-examples-insert-text-in-action-buffer (text)
       (let ((p (point)))
         (insert text)
         (put-text-property p (+ p (length text)) 'mouse-face
                                                  'highlight)))

     (defun ecb-examples-action-buffer-create ()
       (save-excursion
         (if (get-buffer ecb-examples-action-buffer-name)
             (get-buffer ecb-examples-action-buffer-name)

           (set-buffer (get-buffer-create
                         ecb-examples-action-buffer-name))

           ;; we setup a local key-map and bind middle-mouse-button
           ;; see ecb-examples.el for the full code

           ;; insert the action buttons [prior] and [next] and
           ;; make it read-only

           (ecb-with-readonly-buffer (current-buffer)
             (erase-buffer)
             (ecb-examples-insert-text-in-action-buffer "[prior]")
             ;; analogous for the [next] button
             )

           (current-buffer))))

The function which performs the actions in the action-buffer if clicked
with the middle-mouse button onto a button [next] or [prior].

     (defun ecb-examples-action-buffer-clicked (e)
       (interactive "e")
       (mouse-set-point e)
       (let ((line (buffer-substring (ecb-line-beginning-pos)
                                     (ecb-line-end-pos))))
         (cond ((string-match "prior" line)
                (ecb-select-edit-window)
                (call-interactively 'scroll-down))
               ((string-match "next" line)
                ;; analogous for [next]
                ))))

The function which makes the action-buffer dedicated to a window.

     (defun ecb-examples-set-action-buffer ()
       (let ((buf-name (buffer-name (ecb-examples-action-buffer-create))))
         (ecb-with-dedicated-window buf-name 'ecb-examples-set-action-buffer
           (switch-to-buffer (buffer-name
                              (ecb-examples-action-buffer-create))))))

We do not need more code for the action buffer.  All of the code is
standard emacs-lisp which would also needed if used without ECB.

9.5.2.6 Adding the bufferinfo- and action-buffer to a new layout
................................................................

Now we add the bufferinfo- and the action-buffer to a new layout of type
top with name "example-layout1":

     (ecb-layout-define "example-layout1" top

       ;; dedicating the bufferinfo window to the bufferinfo-buffer
       (ecb-examples-set-bufferinfo-buffer)

       ;; creating the action-window
       (ecb-split-hor 0.75)

       ;; dedicate the action window to the action-buffer
       (ecb-examples-set-action-buffer)

       ;; select the edit-window
       (select-window (next-window)))

This all what we need to define the new layout.  See *note Programming a
new layout:: for more details of the pure layout-programming task.

9.5.2.7 Synchronizing the bufferinfo-buffer automatically
.........................................................

The last thing we have to do is to synchronize the bufferinfo-buffer
with current edit-window.  We do this by adding
'ecb-examples-bufferinfo-sync' to the hook
'ecb-current-buffer-sync-hook'' (The file 'ecb-examples.el' shows a
smarter mechanism for (de)activating the new layout and the
synchronization but this works also very well).

     (add-hook 'ecb-current-buffer-sync-hook 'ecb-examples-bufferinfo-sync)

9.5.2.8 Activating and deactivating new layouts
...............................................

Because a set of new special windows integrated in a new layout is often
just the GUI of a complete tool (like a graphical debugger) we
demonstrate here the complete activation and deactivation of such a tool
or at least of the tool-GUI. We decide that the GUI of our example
"tool" needs a compile-window with height 5 lines and the height of the
special windows "row" on top should be exactly 6 lines (normally width
and height of the special windows should be a fraction of the frame, but
here we use 6 lines(2)

Here comes the (de)activation code.

The code for saving and restoring the state before activation (the full
code is available in 'ecb-examples.el':

     (defun ecb-examples-preactivation-state(action)
       (cond ((equal action 'save)
              ;; code for saving the state
              )
             ((equal action 'restore)
             ;; code for restoring the state
             )))

The following function activates the GUI of our example tool:

     (defun ecb-examples-activate ()
       (interactive)

       ;; activating the synchronization of the bufferinfo-window
       (add-hook 'ecb-current-buffer-sync-hook
                 'ecb-examples-bufferinfo-sync)

       ;; saving the state
       (ecb-examples-preactivation-state 'save)

       ;; switch to our preferred layout
       (setq ecb-windows-height 6)
       (setq ecb-compile-window-height 5)
       (ecb-layout-switch "example-layout1"))

This function deactivates the GUI of our example-tool and restores the
state as before activation:

     (defun ecb-examples-deactivate ()
       (interactive)

       (remove-hook 'ecb-current-buffer-sync-hook
                    'ecb-examples-bufferinfo-sync)
       (ecb-examples-preactivation-state 'restore)
       (ecb-layout-switch ecb-layout-name))

Now we have all code for the new layout and the new layout-buffers.  The
example is ready for use; just load 'ecb-examples.el' (s.a.).

   ---------- Footnotes ----------

   (1) JDEE is available at <http://jdee.sunsite.dk/>

   (2) You can change the code in the file 'ecb-examples.el' to use a
frame-fraction of 0.2 instead of 6 hard lines, just try it!


File: ecb.info,  Node: Possible layout-outlines,  Next: The layout-engine API,  Prev: Programming special windows,  Up: The layout-engine

9.5.3 The wide range of possible layout-outlines
------------------------------------------------

In the two previous sections *note Programming a new layout:: and *note
Programming special windows:: we have explained in detail how to program
new layouts and how to program new special windows/buffers and adding
them to a new layout.

The intention of this section is to be a summary what are the real
restrictions for a new layout-outline programmed with
'ecb-layout-define'.  This is necessary because until now we just
programmed "obvious" layouts, means layout which are in principle very
similar to the standard ones which means one big edit-window and some
special windows "around" this edit-window.  This section will show you
that a layout can have also very different outlines.

OK, here are the real restrictions and conditions for a layout
programmed with 'ecb-layout-define':
  1. It must have exactly one edit-window regardless of its size.  The
     user of this layout can later split this edit-window in as many
     edit-windows as he like.

  2. All other windows created within the CREATE-CODE body of
     'ecb-layout-define' (*note Programming a new layout::) must be
     dedicated to their buffers.

  3. All the dedicated windows must (exclusive!)  either reside on the
     left, right, top or left-and-right side of the edit-window.  This
     will be defined with the TYPE-argument of 'ecb-layout-define'
     (*note Programming a new layout::).

You see, there are only three restrictions/conditions.  These and only
these must be fulfilled at layout-programming.

Demonstrating what this really means and how flexible the layout-engine
of ECB really is, can be done best with some "pathological"
layout-outlines.  All the following are correct layouts (working code is
added below each layout):

The following is a top layout with three vertical layered special
windows.

     ------------------------------------------------------------------
     |                                                                |
     |                 Upper special window                           |
     |                                                                |
     |----------------------------------------------------------------|
     |                                                                |
     |                 Middle special window                          |
     |                                                                |
     |----------------------------------------------------------------|
     |                                                                |
     |                 Lower special window                           |
     |                                                                |
     |================================================================|
     |                                                                |
     |                         Edit-area                              |
     |      (can be splitted by the user in several edit-windows)     |
     ------------------------------------------------------------------
     |                                                                |
     |                 Compilation-window (optional)                  |
     |                                                                |
     ------------------------------------------------------------------

Here is the code for that top layout (all buffers are dummy-buffers):


     ;; The "dedicated setter" functions:

     (defun ecb-set-usw-buffer ()
       (ecb-with-dedicated-window
         "Upper special window"
         'ecb-set-usw-buffer
           (switch-to-buffer (get-buffer-create "Upper special window"))))

     (defun ecb-set-msw-buffer ()
       (ecb-with-dedicated-window
         "Middle special window"
         'ecb-set-msw-buffer
           (switch-to-buffer (get-buffer-create "Middle special window"))))

     (defun ecb-set-lsw-buffer ()
       (ecb-with-dedicated-window
         "Lower special window"
         'ecb-set-lsw-buffer
           (switch-to-buffer (get-buffer-create "Lower special window"))))

     ;; The layout itself:

     (ecb-layout-define "example-layout3" top
       nil

       ;; here we have an edit-window and above one top window which we can
       ;; now split in several other windows. Dependent on the value of
       ;; `ecb-compile-window-height' we have also a compile-window at the
       ;; bottom.

       (ecb-set-usw-buffer)
       (ecb-split-ver 0.33)
       (ecb-set-msw-buffer)
       (ecb-split-ver 0.5)
       (ecb-set-lsw-buffer)

       ;; select the edit-window.
       (select-window (next-window)))

The following is a left-right layout which has six special windows in
the left-"column" and one big special window in the right-"column".  For
left-right layouts the left-"column" and the right-"column" have always
the same width.

     ------------------------------------------------------------------
     |             |       |                   |                      |
     | Left1       | Left5 |                   |                      |
     |             |       |                   |                      |
     |-------------|       |                   |                      |
     |      |      |       |                   |                      |
     |      |      |       |                   |                      |
     |      |      |       |                   |                      |
     | Left2| Left3|-------|     Edit-area     |   Right1             |
     |      |      |       | (can be splitted  |                      |
     |      |      |       |  in several edit- |                      |
     |      |      |       |      windows)     |                      |
     |-------------|       |                   |                      |
     |             |       |                   |                      |
     | Left4       | Left6 |                   |                      |
     |             |       |                   |                      |
     ------------------------------------------------------------------
     |                                                                |
     |                 Compilation-window (optional)                  |
     |                                                                |
     ------------------------------------------------------------------

Here is the code for that left-right layout, again with dummy-buffers
(depending to your screen-resolution you will need a quite big value for
'ecb-windows-width', e.g.  0.4):

Here is one of the "dedicated setter" functions(1):

     (defun ecb-set-left1-buffer ()
       (ecb-with-dedicated-window
         "Left1"
         'ecb-set-left1-buffer
           (switch-to-buffer (get-buffer-create "Left1"))))

Here is the layout-definition itself:

     (ecb-layout-define "example-layout2" left-right
       nil

       ;; here we have an edit-window and left and right two windows each
       ;; with width `ecb-windows-width'. Dependent to the value of
       ;; `ecb-compile-window-height' we have also a compile-window at the
       ;; bottom.

       (ecb-set-left1-buffer)
       (ecb-split-hor 0.66 t)
       (ecb-split-ver 0.75)
       (ecb-set-left4-buffer)
       (select-window (previous-window (selected-window) 0))
       (ecb-split-ver 0.25 nil t)
       (ecb-set-left2-buffer)
       (ecb-split-hor 0.5)
       (ecb-set-left3-buffer)
       (select-window (next-window (next-window)))
       (ecb-set-left5-buffer)
       (ecb-split-ver 0.5)
       (ecb-set-left6-buffer)
       (select-window (next-window (next-window)))
       (ecb-set-right1-buffer))

       ;; select the edit-window
       (select-window (previous-window (selected-window) 0)))

Especially the last example should demonstrate that even very
complicated layouts are easy to program with 'ecb-layout-define'.  If
such layouts are senseful is another topic ;-)

   ---------- Footnotes ----------

   (1) The "dedicated setter functions" for all these
ecb-windows/buffers are not explicitly described - they look all like
'ecb-set-left1-buffer' - of course with different buffer-names!


File: ecb.info,  Node: The layout-engine API,  Prev: Possible layout-outlines,  Up: The layout-engine

9.5.4 The complete layout-engine API of ECB
-------------------------------------------

This section lists all functions, macros, variables and user-options the
layout-engine API of ECB offers foreign packages.  Call
'describe-function' rsp.  'describe-variable' to get a detailed
description.

Functions for programming with layouts and special ecb-windows:
   - ecb-available-layouts-member-p
   - ecb-canonical-ecb-windows-list
   - ecb-canonical-edit-windows-list
   - ecb-compile-window-live-p
   - ecb-compile-window-state
   - ecb-do-if-buffer-visible-in-ecb-frame
   - ecb-get-current-visible-ecb-buffers
   - ecb-layout-define
   - ecb-layout-switch
   - ecb-layout-undefine
   - ecb-point-in-compile-window
   - ecb-point-in-ecb-window
   - ecb-point-in-edit-window
   - ecb-select-edit-window
   - ecb-split-hor
   - ecb-split-ver
   - ecb-where-is-point
   - ecb-with-dedicated-window

Utility functions/macros:
   - ecb-enlarge-window
   - ecb-fix-filename
   - ecb-window-live-p
   - ecb-with-readonly-buffer

Some other maybe useful functions/macros:
   - ecb-with-adviced-functions
   - ecb-with-original-functions
   - ecb-with-some-adviced-functions

Some useful *READONLY* variables:
   - ecb-compile-window
   - ecb-last-edit-window-with-point
   - ecb-last-source-buffer

*Caution*: DO NOT USE THE VARIABLE 'ecb-edit-window' IN YOUR PROGRAMS!

User-options and hooks related to the layout-engine API:
   - ecb-current-buffer-sync-hook
   - ecb-hide-ecb-windows-after-hook
   - ecb-hide-ecb-windows-before-hook
   - ecb-redraw-layout-after-hook
   - ecb-redraw-layout-before-hook
   - ecb-show-ecb-windows-after-hook
   - ecb-show-ecb-windows-before-hook
   - ecb-windows-height
   - ecb-windows-width
   - ecb-compile-window-height


File: ecb.info,  Node: Conflicts and bugs,  Next: FAQ,  Prev: Elisp programming,  Up: Top

10 Conflicts and bugs of ECB
****************************

This chapter describes what to do when there are conflicts with other
packages and also the known (and currently unfixed) bugs of ECB. If
possible (and in most cases it is possible ;-) then a practicable
solution or workaround is described.

* Menu:

* Conflicts::                   Conflicts with other packages
* Bugs::                        Known bugs


File: ecb.info,  Node: Conflicts,  Next: Bugs,  Prev: Conflicts and bugs,  Up: Conflicts and bugs

10.1 Conflicts with other packages
==================================

This chapter contains a list of already known conflict between ECB and
other packages and how to solve them - in most cases ECB already
contains a suitable workaround.

That is followed by a general recipe what you can do when you have
detected a conflict between ECB and a package is not listed in the
know-conflicts-section.

10.1.1 Proved workarounds or recommendations for other packages
---------------------------------------------------------------

Here is a list of packages which are proved to work properly with ECB
and if not (i.e.  there are conflicts) then helpful
solutions/hints/workarounds are offered:

10.1.1.1 Package avoid.el
.........................

With GNU Emacs 20.X ECB must deactivate 'mouse-avoidance-mode' if the
option 'ecb-show-node-info-in-minibuffer' activates for at least one ECB
tree-buffer 'if-too-long or 'always.  This is done automatically but
only as long ECB is activated.

10.1.1.2 Package bs.el
......................

The package bs.el offers a nifty buffer-selection buffer.  The main
command of this package is 'bs-show'.  With ECB < 2.20 this command does
not really working well within activated ECB. But as of version 2.20 of
ECB there should be no problems using this package.

If you add "*buffer-selection*" as buffer-name to the option
'ecb-compilation-buffer-names' then ECB will always display the
buffer-selection buffer of bs in the compile-window (if there is one).
Otherwise bs will use the edit-area to do its job.

10.1.1.3 Package BBDB
.....................

As of ECB 2.21 there should be no conflicts between BBDB and ECB, so
BBDB can be used even when the ECB-windows are visible.

But if you encounter problems then it is recommened to use one of the
window-managers escreen.el or winring.el (*note Window-managers and
ECB::).  With such a window-manager ECB and BBDB should work together
very well under all circumstances!

10.1.1.4 Package calendar.el
............................

With activated ECB 'calendar' does not shrink it큦 window to the small
size but splits the window equally.  But if you add this to your
'.emacs' it works:

     (add-hook 'initial-calendar-window-hook
               (function (lambda ()
                           (when (and ecb-minor-mode
                                      (ecb-point-in-edit-window))
                             ;; if no horizontal split then nothing
                             ;; special to do
                             (or (= (frame-width) (window-width))
                                 (shrink-window (- (window-height) 9))))
                          )))

10.1.1.5 Package cygwin-mount.el
................................

There can be a conflict between ECB and cygwin-mount.el if the following
conditions are true:

   - You are working with cygwin-mount.el (sounds clear :-)
   - You have set 'cygwin-mount-build-mount-table-asynch' to not nil
   - ECB is automatically started after starting Emacs (e.g.  with
     'ecb-auto-activate' or calling 'ecb-activate' in
     'window-setup-hook')
   - Your Emacs-setup contains a call of 'cygwin-mount-activate'.

Under these circumstances Emacs 21.X sometimes eats up the whole CPU (at
least with Windows XP) and the cygwin-mount-table is never build.

But there is an easy work-around: Call 'cygwin-mount-activate' first
*AFTER* ECB is activated.  This can be done with the hook
'ecb-activate-hook':

     (add-hook 'ecb-activate-hook
               (function (lambda ()
                           (require 'cygwin-mount)
                           (setq cygwin-mount-build-mount-table-asynch t)
                           (cygwin-mount-activate))))


10.1.1.6 Package desktop.el
...........................

ECB works perfectly with the desktop-saver desktop.el.  But to ensure
this the option 'desktop-minor-mode-table' *MUST* contain an the
following entry:

     (ecb-minor-mode nil)

Without this entry desktop.el tries for each buffer it loads after
Emacs-start to enable 'ecb-minor-mode' and therefore to start ECB. This
conflicts with ECB! Therefore you must add the entry above to
'desktop-minor-mode-table'!

Further it is strongly recommended to add entries for all the minor-mode
of the semantic-package to 'desktop-minor-mode-table', so for example
add also:

     (semantic-show-unmatched-syntax-mode nil)
     (semantic-stickyfunc-mode nil)
     (senator-minor-mode nil)
     (semantic-idle-scheduler-mode nil)

Which modes you have to add depends on which modes of semantic you use.
But to get sure you should add all minor-modes of the semantic-package
because these modes are normally activated by the related "global"
command (e.g.  'global-semantic-show-unmatched-syntax-mode') or by
adding the minor-mode to the related major-mode-hook.

10.1.1.7 Package edebug (Lisp Debugger)
.......................................

It is strongly recommended to run edebug only when the ECB-windows are
hidden.  With visible ECB-windows there will probably serious conflicts
between the ECB-layout and the edebug-window-manager.

10.1.1.8 Package ediff.el
.........................

In most cases ECB works very well with ediff (see option
'ecb-run-ediff-in-ecb-frame').  But currently suspending ediff with
'ediff-suspend' and restoring the ediff-session (e.g.  with command
'eregistry') does confuse the window-management of ECB.

If you often use ediff in a scenario where you suspend ediff and
reactivate it later then it is recommended to exit ECB first
('ecb-deactivate' or 'ecb-minor-mode')!

10.1.1.9 Package follow-mouse.el
................................

The following is only relevant for Emacs 20.X!

ECB works very well with follow-mouse if follow-mouse is turned on
*BEFORE* ECB is activated (e.g.  within the 'ecb-activate-hook').  But
if you activate follow-mouse first after ECB is already activated, then
the follow-mouse stuff prevents the complete node-name to be displayed
in the echo-area if mouse moves over it.  Because ECB has a much more
intelligent mouse tracking mechanism than follow-mouse the follow-mouse
stuff profit from ECB and works even better and saver as without
activated ECB!

10.1.1.10 Package func-menu.el
..............................

This package has been reported to produce some conflicts under some
circumstances when ECB is activated.  Some of them could be reproduced
by the ECB-maintainer.  So the recommendation is to disable
func-menu-support when using ECB. Normally using func-menu makes no
sense in combination with ECB because ECB provides the same and even
more informations as func-menu - so func-menu is redundant ;-)

10.1.1.11 Package Gnus (Newsreader)
...................................

As of ECB 2.21 there should be no conflicts between Gnus and ECB, so
Gnus can be used even when the ECB-windows are visible.

But if you encounter problems then it is recommened to use one of the
window-managers escreen.el or winring.el (*note Window-managers and
ECB::).  With such a window-manager ECB and Gnus should work together
very well under all circumstances!

10.1.1.12 Package JDEE (Java Development Environment)
.....................................................

JDEE has a lot of "dialogs" where the user can select among several
choices.  An example is importing classes via the command
'jde-import-find-and-import'.  These dialogs are strongly designed to
work in an environment where a new temporary window is created, the
contents of the dialog are displayed in the new window, the user select
his choice and hits [OK]. After that the new window is deleted and the
selection is performed (for example the chosen import statement are
inserted in the source-buffer.

*Caution*: ECB can work very well with this dialogs but only if the
buffer-name of these dialog-buffers (normally "Dialog") is not contained
in the option 'ecb-compilation-buffer-names'.  So do not add the string
"Dialog" to this option!

*Please Note*: Regardless if a durable compile-window is used (i.e.
'ecb-compile-window-height' is not nil) or not, these JDEE-dialogs will
always being displayed by splitting the edit-window of ECB and not
within the compile-window.

10.1.1.13 Package scroll-all.el (scroll-all-mode)
.................................................

ECB advices 'scroll-all-mode' so it is working correct during running
ECB. This means if point stays in an edit-window and the edit-window is
splitted then all edit-windows are scrolled by 'scroll-all-mode' and no
other window!  If point stays in any other window just this selected
window is scrolled.  This is the only senseful behavior of
'scroll-all-mode' with ECB.

10.1.1.14 Package VC (Version Control)
......................................

The variable 'vc-delete-logbuf-window' must be set to nil during active
ECB. This can be done with the hooks mentioned in *note Elisp
programming::.

10.1.1.15 Package VM (Emacs Mail-Client)
........................................

As of ECB 2.21 there should be no conflicts between VM and ECB, so VM
can be used even when the ECB-windows are visible.

But if you encounter problems then it is recommened to use one of the
window-managers escreen.el or winring.el (*note Window-managers and
ECB::).  With such a window-manager ECB and VM should work together very
well under all circumstances!

10.1.1.16 Package winner.el (winner-mode)
.........................................

'winner-mode' is autom.  disabled as long as ECB is running.  ECB has
its own window-management which is completely incompatible with
'winner-mode'!  But 'winner-mode' makes also not really sense with ECB.

10.1.1.17 Application xrefactory
................................

Xrefactory (also known as Xref, X-ref and Xref-Speller), the refactoring
browser for (X)Emacs(1), can be used during running ECB regardless if
the ECB-windows are visible or not.  There should be no conflicts as of
ECB versions >= 2.21.

If there are conflicts with the Xref-browser then the most recommended
way is to use one of the window-manager escreen.el or winring.el (and
then use different escreens or window-configurations for ECB and
Xrefactory-browsing - *note Window-managers and ECB::).

10.1.2 What to do for unknown conflicts with other packages
-----------------------------------------------------------

As of version 2.20 the layout-engine of ECB is so flexible that normally
there should be no conflicts with other packages unless these packages
have their own complete window-layout-management (e.g.  Gnus, BBDB,
Xrefactory).  But these packages can and should be handled very well
with the window-manager-support of ECB (*note Window-managers and
ECB::).

So if you detect an unknown (i.e.  not listed in the conflicts-list in
the next subsection) conflict with a small package and some of its
commands and you have installed an ECB-version < 2.20 the first task you
have to do is to upgrade to a version >= 2.20!

If this doesn't solve the problem a very probable reason for the
conflict is that the command fails if called from another window than an
edit-window of the ecb-frame.  So please check if the problem disappears
if you call the failing command from an edit-window of ECB. If this is
true then you you can add the following code to your .emacs (and of
course replace the XXX with the failing command):

     (defadvice XXX (before ecb activate)
       "Ensures `XXX' works well when called from another window
     as an edit-window. Does nothing if called in another frame
     as the `ecb-frame'."
       (when (equal (selected-frame) ecb-frame)
         (unless (ecb-point-in-edit-window)
           (ecb-select-edit-window))))

This before-advice runs before the command XXX and ensures that the XXX
is called from within an edit-window if the current selected window is
not an edit-window.  It does nothing if called for another frame as the
ecb-frame.

If such an advice solves the problem then please send a not with the
solution to the ECB-mailing-list or direct to the ECB-maintainer so the
solution can be integrated in the next ECB-release

If calling from an edit-window fails too then please file a complete
bug-report to the ECB-mailing-list (*note Submitting problem report::).
This report should contain a detailed description which command of which
package fails under which circumstances!

   ---------- Footnotes ----------

   (1) Xrefactory is available at <http://www.xref-tech.com>


File: ecb.info,  Node: Bugs,  Prev: Conflicts,  Up: Conflicts and bugs

10.2 Known bugs
===============

This section describes all currently known bugs of ECB. The maintainers
of ECB try to fix these bugs as soon as possible.

10.2.1 Following the source-file link in a help-buffer
------------------------------------------------------

The following bug occurs only in ECB-versions < 1.96 and is fixed since
ECB 1.96!!

This bug only occurs if a compile-window is used and visible!

If you call functions like 'describe-function' which displays a
help-buffer in the compile-window, then you will often get an output
like this in the compile-window:

     ecb-activate is an interactive compiled Lisp function in `ecb'.
     (ecb-activate)

     Activates the ECB...

The link to 'ecb' is normally a click-able link, means if you click with
the middle-mouse button onto it the file is opened (in our example
'ecb.el' would be opened.

If you click onto it when the help-buffer is already the current buffer
(i.e.  the compile-window is already selected before the click!)  then
all is working fine (i.e.  the file is opened in the edit-window), but
if you click onto the link without selecting the compile-window before
(i.e.  the edit-window is the current selected window) then the file is
opened in the compile-window which is probably not what you want.  Not a
big problem but annoying.

The only available workaround is, first selecting the compile-window and
then clicking onto the link!

10.2.2 Extra history-entries for JDEE source-buffers
----------------------------------------------------

ECB on occasions creates an extra edit buffer for entries in the history
window.  For example, let say there are three entries in the history
window:

     Test1
     Test2
     Test3

In the edit window Test1 file is edited.  When clicked on Test2 entry in
history, on occasion instead of switching to the existing buffer for
Test2, a new edit buffer is opened for Test2 file.  At this point, there
are four entries in the history as follows:

     Test2
     Test2<2>
     Test1
     Test3


File: ecb.info,  Node: FAQ,  Next: Command Index,  Prev: Conflicts and bugs,  Up: Top

11 Frequently asked questions
*****************************

This is the Emacs Code Browser FAQ.

QUESTION                        ANSWER
                                
                                
What is the first step i        Read carefully the related sections of
should do if i have             the online-help of ECB.
problems with ECB?              
                                
What should i do, if a have     Send a problem-report to the
a problem which can not be      ECB-mailing-list with the command
solved even after reading       'ecb-submit-problem-report'.
the online-help?                See *note Submitting problem report::.
                                
                                
What should i do, if            Take a look into *note Conflicts::.  If
another package seems not       your package is not listed there then
to work correct with ECB?       submit a problem-report.
                                
                                
Can ECB parse and display       Yes, in all version >= 1.94.  ECB can
source-contents not             now parse and display all
supported by semantic?          source-contents supported by semantic,
                                imenu or etags - same as speedbar.  See
                                *note Non-semantic sources::.
                                
                                
Why are the lines in the        Check the variable
ECB-, temp- and                 'truncate-partial-width-windows' and set
compilation-buffers not         it to nil.
wrapped but truncated?          
                                
Why doesn't ECB work            The variable 'vc-delete-logbuf-window'
correct with VC?                must be set to nil during active ECB.
                                This can be done with the hooks of ECB.
                                
                                
Does ECB support C++ as         This depends strongly on the used
well as Java?                   semantic-version, but all
                                semantic-versions >= semantic-1.4.3
                                support C++ really well.
                                
                                
Does ECB support Perl?          If perl can be parsed either by imenu,
                                etags or semantic then ECB supports
                                perl.  Of course ECB would support perl
                                best if perl is supported by semantic.
                                
                                
Does ECB support language       See question "Does ECB support Perl?"
XYZ?                            and replace "Perl" with "XYZ" in the
                                answer.
                                
                                
How to add new languages to     Add the language XYZ to semantic
ECB?                            (perform all necessary steps described
                                in the semantic-manual) and ECB will
                                automatically support language XYZ!
                                There is nothing to do in ECB itself!
                                Same when you write an imenu- or
                                etags-support for language XYZ.
                                
                                
Why does ECB not recognize      Your C++-files have probably an
my source-files for C++?        extension which is not mapped to
                                c++-mode in 'auto-mode-alist' and/or
                                your own Emacs-setup has "destroyed" the
                                correct value of the hook-variable
                                'c++-mode-hook'.
                                See *note Setting up Emacs::.
                                
                                
Why doesn't ECB display the     There can be several reasons: First the
node name in the echo area      value of the option
if mouse moves over it?         'ecb-show-node-name-in-minibuffer' must
                                be either 'always' or 'if-too-long'.  If
                                this is OK, then maybe you have turned
                                on follow-mouse AFTER activating ECB;
                                follow-mouse must be turned on BEFORE
                                ECB is activated, e.g.  in the
                                'ecb-activate-hook'!  But with Emacs
                                21.X and XEmacs there are no problems
                                with this feature, just activate it.
                                
                                
What is the reason for poor     Set 'scroll-conservatively' to 0 and
scrolling performance with      'scroll-step' to a value > 1.  For the
GNU Emacs 20.X in the           exact reason look at
edit-windows and what can i     *note Optimize scrolling::.
do?                             
                                
Is it possible to make the      You can use the library "desktop.el"
history of ECB persistent?      which works very well with ECB. Then all
                                files of your recent Emacs-session will
                                be opened automatically after next
                                Emacs-start and will be added
                                automatically to the ECB-history after
                                ECB-start.
                                
                                
Is there an                     For Java the JDEE(1) has this feature
"Intellisense"-mechanism        and for all other languages semantic
like with other IDEs?           offer something similar, see
                                <http://cedet.sourceforge.net/intellisense.shtml>
                                
                                
Can i use ECB in                You can, but for ECB-versions < 1.96 it
combination with Gnus           is not recommended because each of them
within one frame?               has it's own window-management and
                                probably there will be conflicts, so use
                                different frames for ECB and Gnus!  But
                                beginning with ECB 1.96 you can use
                                either escreen.el or winring.el as
                                "window-manager" which allows you in
                                consequence to use ECB and applications
                                like Gnus in one frame!
                                *Note Window-managers and ECB::.
                                
                                
Can i speed up displaying       Yes, see the option
the contents of big-size        'ecb-cache-directory-contents'.  Read
directories?                    the section
                                *note Large directories::.
                                
                                
Is it possible to               Yes.  *note Creating a new ECB-layout::
create/use other layouts        and
than the built-in ones?         *note The layout-engine:: are the
                                relevant sections.  The former one
                                describes how to create interactively
                                new layouts where the latter one is for
                                Elisp-programmers.
                                
                                
Can i use speedbar as           Yes, see *note Integrating speedbar::.
directory-browser within        
ECB?
                                
Can i exclude                   Yes, see *note Grepping directories::.
subdirectories from the         
recursive grep in the
directories buffer?
                                
How can i prevent               Set 'semanticdb-default-save-directory'
contaminating each              to a directory.
directory with a file           
'semantic-cache'?
                                
Why ECB displays large          This comes from semantic;
portions of current             see *note Setting up Emacs::.
source-file with dark           
background?
                                
Why ECB underlines some         This comes from semantic;
parts of current                see *note Setting up Emacs::.
source-file?                    
                                
Can i add my own commands       Yes, see *note Using the mouse::.
to the popup-menus of           
tree-buffers?
                                
Can ECB display the             Yes, see *note Tips and tricks::.
compile-window "on demand"?     
                                
Which buffers are treated       See the docstring of the function
as compilation-buffers by       'ecb-compilation-buffer-p'.
ECB?                            
                                
How can i change the            You can change it with the options
modeline of an                  'ecb-mode-line-prefixes',
ECB-tree-buffer?                'ecb-mode-line-data' and
                                'ecb-mode-line-display-window-number'.
                                
                                
Can the tree-buffers being      Yes, see option
selected faster than with       'ecb-mode-line-display-window-number'.
the standard-keybindings of     
ECB?
                                
Can ECB display the             Yes, see option
window-number in the            'ecb-mode-line-display-window-number'.
modeline of the special         
windows?
                                
How can i change the            You can do this with option
keybindings of ECB?             'ecb-key-map' (*note ecb-general::).
                                
                                
What can i do if                Either the current 'major-modes' is not
hiding/showing from the         supported by hideshow or you have to add
methods-buffer does not         an entry to 'hs-special-modes-alist'
work?                           (*note Hide-show::).
                                
                                
Can i maximize one of the       Yes, see *note Maximizing the ECB
ECB-windows for better          windows::.
overlook?                       
                                
Can i hide the ECB-windows      Yes, see *note Hiding the ECB windows::.
for getting more                
editing-space?
                                
Can i define the actions        Yes, see *note Visiting tags::.
ECB performs after visiting     
a tag?
                                
Buffers are not displayed       See *note Problems with the compile
correctly in the                window::.
compile-window?                 
                                
Can ECB work together with      Yes, see *note Window-managers and
window-managers like            ECB::.
escreen.el?                     
                                
Can i remove these "ugly"       Yes, see option 'ecb-tree-buffer-style'.
vertical lines from a           
tree-buffer?
                                
ECB does not display images     Customize 'ecb-tree-buffer-style' and
in the tree-buffers - what      restart ECB. But note: GNU Emacs <=
can i do?                       21.3.X for Windows does not support
                                image-display so ECB uses always
                                ascii-guide-lines even when here the
                                image-style is set in
                                'ecb-tree-buffer-style'.
                                
                                
Do                              Yes, see
'special-display-function'      *note Using special-display with ECB::.
et.  al.  work with ECB.        
                                
Can i activate the              Yes, see *note Using popup-menus::.
popup-menu of a tree-buffer     
from keyboard?
                                
Can i display the               Yes, see *note Using popup-menus::.
popup-menu of a tree-buffer     
with tmm?
                                
Does ECB disable all            "Nes"(2), see remarks in the
advices after deactivation?     documentation of the option
                                'ecb-split-edit-window-after-start'.
                                
                                
Can ECB preserve the full       Yes, see the option
state of ECB between            'ecb-split-edit-window-after-start'.
deactivation and next           
activation?
                                
Can i change the behavior       Yes, see *note The other window::.
how ECB chooses another         
window for selecting it or
scrolling it.
                                
Can i increase the allowed      Yes, see the docstring of the option
depth of nested submenus.       'ecb-directories-menu-user-extension'.
                                
                                
Can i apply some filters to     Yes, see *note Filtering the
the Tree-buffers.               tree-buffers::
                                
                                
With XEmacs i get sometimes     Disable the func-menu support in your
an error "Wrong number of       XEmacs-setup.  See *note Conflicts::.
arguments: widen (1)".          
What can i do?
                                
Can i use desktop.el in         Yes, see *note Conflicts::.
combination with ECB?           
                                
Opening directories takes a     Read *note Large directories:: and/or
long time?  What can i do?      set the option
                                'ecb-prescan-directories-for-emptyness'
                                to nil.
                                

   ---------- Footnotes ----------

   (1) <http://jdee.sunsite.dk/>

   (2) Nes is a combination of No and Yes :-)


File: ecb.info,  Node: Command Index,  Next: Option Index,  Prev: FAQ,  Up: Top

Command Index
*************

This index contains all user commands of ECB.

*Please note*: The commands in this index are listed without the prefix
"ecb-" (e.g.  the command 'ecb-activate' is listed with name
"activate").

 [index ]
* Menu:

* activate:                              Interactive ECB commands.
                                                              (line  23)
* add-all-buffers-to-history:            Interactive ECB commands.
                                                              (line  29)
* balance-windows:                       The edit-area.       (line 264)
* change-layout:                         Interactive ECB commands.
                                                              (line  36)
* clear-history:                         Interactive ECB commands.
                                                              (line  45)
* create-new-layout:                     Interactive ECB commands.
                                                              (line  54)
* customize:                             Interactive ECB commands.
                                                              (line  48)
* customize-most-important:              Interactive ECB commands.
                                                              (line  51)
* cycle-maximized-ecb-buffers:           Interactive ECB commands.
                                                              (line  58)
* cycle-through-compilation-buffers:     Interactive ECB commands.
                                                              (line  62)
* deactivate:                            Interactive ECB commands.
                                                              (line  73)
* delete-new-layout:                     Interactive ECB commands.
                                                              (line  76)
* delete-other-windows:                  The edit-area.       (line  98)
* delete-window:                         The edit-area.       (line  69)
* delete-windows-on:                     The edit-area.       (line 138)
* display-buffer:                        The edit-area.       (line 175)
* display-news-for-upgrade:              Interactive ECB commands.
                                                              (line  82)
* display-upgraded-options:              Interactive ECB commands.
                                                              (line  90)
* download-ecb:                          Interactive ECB commands.
                                                              (line  93)
* download-semantic:                     Interactive ECB commands.
                                                              (line 118)
* dump-semantic-toplevel:                Interactive ECB commands.
                                                              (line 179)
* eshell-current-buffer-sync:            Interactive ECB commands.
                                                              (line 182)
* eshell-recenter:                       Interactive ECB commands.
                                                              (line 188)
* expand-directory-nodes:                Interactive ECB commands.
                                                              (line 191)
* expand-methods-nodes:                  Interactive ECB commands.
                                                              (line 143)
* goto-window-compilation:               Interactive ECB commands.
                                                              (line 199)
* goto-window-directories:               Interactive ECB commands.
                                                              (line 202)
* goto-window-edit-last:                 Interactive ECB commands.
                                                              (line 214)
* goto-window-edit1:                     Interactive ECB commands.
                                                              (line 207)
* goto-window-edit2:                     Interactive ECB commands.
                                                              (line 210)
* goto-window-history:                   Interactive ECB commands.
                                                              (line 219)
* goto-window-methods:                   Interactive ECB commands.
                                                              (line 222)
* goto-window-sources:                   Interactive ECB commands.
                                                              (line 227)
* history-filter:                        Interactive ECB commands.
                                                              (line 232)
* jde-display-class-at-point:            Interactive ECB commands.
                                                              (line 246)
* layout-define:                         Programming a new layout.
                                                              (line  24)
* layout-undefine:                       Programming a new layout.
                                                              (line 125)
* maximize-window-directories:           Interactive ECB commands.
                                                              (line 259)
* maximize-window-history:               Interactive ECB commands.
                                                              (line 277)
* maximize-window-methods:               Interactive ECB commands.
                                                              (line 271)
* maximize-window-sources:               Interactive ECB commands.
                                                              (line 265)
* maximize-window-speedbar:              Interactive ECB commands.
                                                              (line 283)
* methods-filter:                        Interactive ECB commands.
                                                              (line 289)
* methods-filter-current-type:           Interactive ECB commands.
                                                              (line 363)
* methods-filter-delete-last:            Interactive ECB commands.
                                                              (line 367)
* methods-filter-function:               Interactive ECB commands.
                                                              (line 371)
* methods-filter-nofilter:               Interactive ECB commands.
                                                              (line 376)
* methods-filter-protection:             Interactive ECB commands.
                                                              (line 380)
* methods-filter-regexp:                 Interactive ECB commands.
                                                              (line 385)
* methods-filter-tagclass:               Interactive ECB commands.
                                                              (line 390)
* minor-mode:                            Interactive ECB commands.
                                                              (line 395)
* nav-goto-next:                         Interactive ECB commands.
                                                              (line 404)
* nav-goto-previous:                     Interactive ECB commands.
                                                              (line 400)
* other-window:                          The edit-area.       (line  63)
* other-window-for-scrolling:            The edit-area.       (line 250)
* rebuild-methods-buffer:                Interactive ECB commands.
                                                              (line 408)
* redraw-layout:                         Interactive ECB commands.
                                                              (line 440)
* restore-default-window-sizes:          Interactive ECB commands.
                                                              (line 480)
* restore-window-sizes:                  Interactive ECB commands.
                                                              (line 483)
* select-ecb-frame:                      Interactive ECB commands.
                                                              (line 488)
* show-help:                             Interactive ECB commands.
                                                              (line 492)
* show-layout-help:                      Interactive ECB commands.
                                                              (line 504)
* show-tip-of-the-day:                   Interactive ECB commands.
                                                              (line 510)
* sources-filter:                        Interactive ECB commands.
                                                              (line 514)
* split-window:                          The edit-area.       (line 146)
* split-window-horizontally:             The edit-area.       (line 157)
* split-window-vertically:               The edit-area.       (line 166)
* store-window-sizes:                    Interactive ECB commands.
                                                              (line 533)
* submit-problem-report:                 Interactive ECB commands.
                                                              (line 547)
* switch-to-buffer:                      The edit-area.       (line 203)
* switch-to-buffer-other-window:         The edit-area.       (line 222)
* toggle-auto-expand-tag-tree:           Interactive ECB commands.
                                                              (line 556)
* toggle-compile-window:                 Interactive ECB commands.
                                                              (line 563)
* toggle-compile-window-height:          Interactive ECB commands.
                                                              (line 574)
* toggle-ecb-windows:                    Interactive ECB commands.
                                                              (line 582)
* toggle-layout:                         Interactive ECB commands.
                                                              (line 588)
* toggle-scroll-other-window-scrolls-compile: Interactive ECB commands.
                                                              (line 602)
* toggle-window-sync:                    Interactive ECB commands.
                                                              (line 609)
* update-directories-buffer:             Interactive ECB commands.
                                                              (line 617)
* upgrade-options:                       Interactive ECB commands.
                                                              (line 620)
* window-sync:                           Interactive ECB commands.
                                                              (line 627)


File: ecb.info,  Node: Option Index,  Next: Concept Index,  Prev: Command Index,  Up: Top

Option Index
************

This index contains all customizable options of ECB.

*Please note*: All options in this index are listed without the prefix
"ecb-" (e.g.  the option 'ecb-layout-name' is listed with name
"layout-name").

 [index ]
* Menu:

* activate-before-layout-draw-hook:      ecb-general.         (line   8)
* activate-before-new-frame-created-hook: ecb-layout.         (line   8)
* activate-hook:                         ecb-general.         (line  35)
* activation-selects-ecb-frame-if-already-active: ecb-general.
                                                              (line  42)
* add-path-for-not-matching-files:       ecb-directories.     (line   8)
* advice-window-functions:               ecb-layout.          (line  13)
* advice-window-functions-signal-error:  ecb-layout.          (line  80)
* auto-activate:                         ecb-general.         (line  48)
* auto-compatibility-check:              ecb-general.         (line  52)
* auto-expand-directory-tree:            ecb-directories.     (line  31)
* auto-expand-tag-tree:                  ecb-methods.         (line   8)
* auto-expand-tag-tree-collapse-other:   ecb-methods.         (line  26)
* auto-save-before-etags-methods-rebuild: ecb-non-semantic.   (line   9)
* auto-update-methods-after-save:        ecb-methods.         (line  32)
* before-activate-hook:                  ecb-general.         (line  67)
* before-deactivate-hook:                ecb-general.         (line  79)
* bucket-node-display:                   ecb-general.         (line  86)
* cache-directory-contents:              ecb-directories.     (line  39)
* cache-directory-contents-not:          ecb-directories.     (line  86)
* change-layout-preserves-compwin-state: ecb-compilation.     (line 165)
* clear-caches-before-activate:          ecb-general.         (line 105)
* common-tree-buffer-after-create-hook:  ecb-tree-buffer.     (line   8)
* compilation-buffer-names:              ecb-compilation.     (line   8)
* compilation-major-modes:               ecb-compilation.     (line  23)
* compilation-predicates:                ecb-compilation.     (line  33)
* compile-window-height:                 ecb-compilation.     (line  49)
* compile-window-prevent-shrink-below-height: ecb-compilation.
                                                              (line  85)
* compile-window-temporally-enlarge:     ecb-compilation.     (line  98)
* compile-window-width:                  ecb-compilation.     (line 126)
* create-layout-file:                    ecb-create-layout.   (line   8)
* current-buffer-sync-hook:              ecb-general.         (line 120)
* deactivate-hook:                       ecb-general.         (line 148)
* debug-mode:                            ecb-general.         (line 152)
* default-tag-filter:                    ecb-methods.         (line  35)
* directories-buffer-after-create-hook:  ecb-directories.     (line 112)
* directories-buffer-name:               ecb-directories.     (line 123)
* directories-general-face:              ecb-face-options.    (line   8)
* directories-menu-sorter:               ecb-directories.     (line 135)
* directories-menu-user-extension:       ecb-directories.     (line 151)
* directories-menu-user-extension-function: ecb-directories.  (line 196)
* directory-face:                        ecb-face-options.    (line  17)
* display-default-dir-after-start:       ecb-directories.     (line 207)
* display-image-icons-for-semantic-tags: ecb-methods.         (line  56)
* download-delete-archive:               ecb-download.        (line   9)
* download-install-parent-dir:           ecb-download.        (line  20)
* download-package-version-type:         ecb-download.        (line  30)
* download-url:                          ecb-download.        (line  59)
* ecb-create-layout-frame-height:        ecb-create-layout.   (line  12)
* ecb-create-layout-frame-width:         ecb-create-layout.   (line  15)
* enlarged-compilation-window-max-height: ecb-compilation.    (line 171)
* eshell-auto-activate:                  ecb-eshell.          (line   8)
* eshell-enlarge-when-eshell:            ecb-eshell.          (line  13)
* eshell-fit-window-to-command-output:   ecb-eshell.          (line  17)
* eshell-synchronize:                    ecb-eshell.          (line  23)
* exclude-parents-regexp:                ecb-methods.         (line  61)
* excluded-directories-regexp:           ecb-directories.     (line 226)
* expand-methods-switch-off-auto-expand: ecb-methods.         (line  69)
* fix-window-size:                       ecb-layout.          (line  96)
* font-lock-tags:                        ecb-methods.         (line  85)
* grep-find-function:                    ecb-general.         (line 175)
* grep-function:                         ecb-general.         (line 162)
* help-html-path:                        ecb-help.            (line   8)
* help-info-path:                        ecb-help.            (line  24)
* hide-ecb-windows-after-hook:           ecb-layout.          (line 123)
* hide-ecb-windows-before-hook:          ecb-layout.          (line 134)
* highlight-tag-with-point:              ecb-methods.         (line  91)
* highlight-tag-with-point-delay:        ecb-methods.         (line 107)
* history-buffer-after-create-hook:      ecb-history.         (line   8)
* history-buffer-name:                   ecb-history.         (line  16)
* history-face:                          ecb-face-options.    (line  25)
* history-general-face:                  ecb-face-options.    (line  33)
* history-item-name:                     ecb-history.         (line  28)
* history-menu-sorter:                   ecb-history.         (line  31)
* history-menu-user-extension:           ecb-history.         (line  44)
* history-menu-user-extension-function:  ecb-history.         (line  55)
* ignore-display-buffer-function:        ecb-layout.          (line 146)
* ignore-special-display:                ecb-layout.          (line 166)
* key-map:                               ecb-general.         (line 180)
* kill-buffer-clears-history:            ecb-history.         (line  65)
* layout-always-operate-in-edit-window:  ecb-layout.          (line 182)
* layout-debug-mode:                     ecb-layout.          (line 208)
* layout-name:                           ecb-layout.          (line 227)
* layout-window-sizes:                   ecb-layout.          (line 253)
* major-modes-show-or-hide:              ecb-general.         (line 242)
* maximize-ecb-window-after-selection:   ecb-layout.          (line 276)
* method-face:                           ecb-face-options.    (line  42)
* method-non-semantic-face:              ecb-face-options.    (line  50)
* methods-buffer-after-create-hook:      ecb-methods.         (line 120)
* methods-buffer-name:                   ecb-methods.         (line 128)
* methods-filter-replace-existing:       ecb-methods.         (line 140)
* methods-general-face:                  ecb-face-options.    (line  56)
* methods-menu-sorter:                   ecb-methods.         (line 158)
* methods-menu-user-extension:           ecb-methods.         (line 171)
* methods-menu-user-extension-function:  ecb-methods.         (line 183)
* methods-nodes-collapse-spec:           ecb-methods.         (line 195)
* methods-nodes-expand-spec:             ecb-methods.         (line 202)
* methods-separate-prototypes:           ecb-methods.         (line 226)
* minor-mode-text:                       ecb-general.         (line 251)
* mode-line-data:                        ecb-mode-line.       (line   8)
* mode-line-data-face:                   ecb-mode-line.       (line  39)
* mode-line-display-window-number:       ecb-mode-line.       (line  44)
* mode-line-prefix-face:                 ecb-mode-line.       (line  95)
* mode-line-prefixes:                    ecb-mode-line.       (line  63)
* mode-line-win-nr-face:                 ecb-mode-line.       (line 100)
* mouse-click-destination:               ecb-general.         (line 260)
* new-ecb-frame:                         ecb-layout.          (line 284)
* non-semantic-exclude-modes:            ecb-non-semantic.    (line  26)
* non-semantic-methods-initial-expand:   ecb-non-semantic.    (line  39)
* non-semantic-parsing-function:         ecb-non-semantic.    (line  45)
* other-window-behavior:                 ecb-layout.          (line 287)
* post-process-semantic-taglist:         ecb-methods.         (line 241)
* prescan-directories-for-emptyness:     ecb-directories.     (line 230)
* primary-secondary-mouse-buttons:       ecb-tree-buffer.     (line  20)
* process-non-semantic-files:            ecb-non-semantic.    (line  74)
* rebuild-non-semantic-methods-before-hook: ecb-non-semantic. (line  78)
* redraw-layout-after-hook:              ecb-layout.          (line 379)
* redraw-layout-before-hook:             ecb-layout.          (line 384)
* redraw-layout-quickly:                 ecb-layout.          (line 388)
* run-ediff-in-ecb-frame:                ecb-general.         (line 289)
* scroll-other-window-scrolls-compile-window: ecb-compilation.
                                                              (line 199)
* select-edit-window-on-redraw:          ecb-layout.          (line 392)
* show-ecb-windows-after-hook:           ecb-layout.          (line 395)
* show-ecb-windows-before-hook:          ecb-layout.          (line 412)
* show-help-format:                      ecb-help.            (line  39)
* show-node-info-in-minibuffer:          ecb-tree-buffer.     (line  72)
* show-only-positioned-tags:             ecb-methods.         (line 265)
* show-source-file-extension:            ecb-sources.         (line   8)
* show-sources-in-directories-buffer:    ecb-directories.     (line 243)
* show-tags:                             ecb-methods.         (line 278)
* sort-history-items:                    ecb-history.         (line  76)
* source-face:                           ecb-face-options.    (line  65)
* source-file-regexps:                   ecb-sources.         (line  11)
* source-in-directories-buffer-face:     ecb-face-options.    (line  73)
* source-path:                           ecb-directories.     (line 246)
* sources-buffer-after-create-hook:      ecb-sources.         (line  55)
* sources-buffer-name:                   ecb-sources.         (line  63)
* sources-exclude-cvsignore:             ecb-sources.         (line  75)
* sources-general-face:                  ecb-face-options.    (line  76)
* sources-menu-sorter:                   ecb-sources.         (line  89)
* sources-menu-user-extension:           ecb-sources.         (line 102)
* sources-menu-user-extension-function:  ecb-sources.         (line 113)
* sources-sort-method:                   ecb-sources.         (line 123)
* split-edit-window-after-start:         ecb-layout.          (line 429)
* tag-display-function:                  ecb-methods.         (line 337)
* tag-header-face:                       ecb-face-options.    (line  85)
* tag-jump-sets-mark:                    ecb-methods.         (line 404)
* tag-visit-post-actions:                ecb-methods.         (line 408)
* tip-of-the-day:                        ecb-general.         (line 298)
* tip-of-the-day-file:                   ecb-general.         (line 301)
* toggle-layout-sequence:                ecb-layout.          (line 476)
* tree-buffer-style:                     ecb-tree-buffer.     (line 129)
* tree-easy-hor-scroll:                  ecb-tree-buffer.     (line 177)
* tree-expand-symbol-before:             ecb-tree-buffer.     (line 201)
* tree-image-icons-directories:          ecb-tree-buffer.     (line 227)
* tree-incremental-search:               ecb-tree-buffer.     (line 255)
* tree-indent:                           ecb-tree-buffer.     (line 261)
* tree-navigation-by-arrow:              ecb-tree-buffer.     (line 266)
* tree-RET-selects-edit-window:          ecb-tree-buffer.     (line 110)
* truncate-lines:                        ecb-tree-buffer.     (line 284)
* truncate-long-names:                   ecb-tree-buffer.     (line 289)
* type-tag-display:                      ecb-methods.         (line 436)
* type-tag-expansion:                    ecb-methods.         (line 505)
* use-recursive-edit:                    ecb-general.         (line 304)
* use-speedbar-instead-native-tree-buffer: ecb-directories.   (line 251)
* version-check:                         ecb-general.         (line 308)
* window-sync:                           ecb-general.         (line 315)
* window-sync-delay:                     ecb-general.         (line 339)
* windows-height:                        ecb-layout.          (line 504)
* windows-width:                         ecb-layout.          (line 509)
* winman-escreen-number:                 ecb-winman.          (line   8)
* winman-winring-name:                   ecb-winman.          (line  14)


File: ecb.info,  Node: Concept Index,  Prev: Option Index,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* Activation hook-sequence:              Standard activation. (line  14)
* Adviced functions:                     The edit-area.       (line  10)
* Automatic activation:                  Automatic activation.
                                                              (line   6)
* Automatic deactivation:                Automatic activation.
                                                              (line   6)
* avoid package:                         Conflicts.           (line  24)
* BBDB:                                  Conflicts.           (line  45)
* bs package:                            Conflicts.           (line  32)
* bs-show:                               Conflicts.           (line  32)
* Bug report:                            Submitting problem report.
                                                              (line   6)
* calendar package:                      Conflicts.           (line  56)
* collapsing:                            Navigation/Selection.
                                                              (line   6)
* compilation buffers:                   Temp- and compile-buffers.
                                                              (line   6)
* Creating new layouts:                  Creating a new ECB-layout.
                                                              (line   6)
* cygwin-mount package:                  Conflicts.           (line  73)
* Deactivation hook-sequence:            Standard activation. (line  23)
* desktop:                               Conflicts.           (line 100)
* Directories:                           ECB Directories-buffer.
                                                              (line   6)
* Download:                              Downloading new versions.
                                                              (line   6)
* ECB-layout:                            The ECB-layout.      (line   6)
* ECB-windows:                           Overview.            (line   6)
* edebug:                                Conflicts.           (line 129)
* ediff:                                 Conflicts.           (line 136)
* edit-window:                           The edit-area.       (line   6)
* escreen:                               Window-managers and ECB.
                                                              (line   6)
* eshell:                                Using eshell.        (line   6)
* expanding:                             Navigation/Selection.
                                                              (line   6)
* Faces:                                 Changing faces.      (line   6)
* Filter:                                Filtering the tree-buffers.
                                                              (line   6)
* follow-mouse package:                  Conflicts.           (line 150)
* func-menu package:                     Conflicts.           (line 162)
* Gnus:                                  Conflicts.           (line 172)
* grep buffers:                          Temp- and compile-buffers.
                                                              (line   6)
* help buffers:                          Temp- and compile-buffers.
                                                              (line   6)
* Hide windows:                          Hiding the ECB windows.
                                                              (line   6)
* History:                               ECB Sources-buffer.  (line   6)
* Hooks:                                 List of hooks.       (line   8)
* Incremental search:                    Incremental search.  (line   6)
* JDEE:                                  Conflicts.           (line 183)
* layout:                                The ECB-layout.      (line   6)
* Methods:                               ECB Methods-buffer.  (line   6)
* minor mode:                            Standard activation. (line  11)
* mouse button:                          Using the mouse.     (line   6)
* New layouts:                           Creating a new ECB-layout.
                                                              (line   6)
* non-semantic-sources:                  The Methods buffer.  (line  19)
* other window:                          The other window.    (line   6)
* POWER-click:                           Using the mouse.     (line  39)
* primary button:                        Using the mouse.     (line   6)
* Problem report:                        Submitting problem report.
                                                              (line   6)
* Redraw:                                Redrawing the ECB-layout.
                                                              (line   6)
* RETURN key:                            Navigation/Selection.
                                                              (line   6)
* scroll-all:                            Conflicts.           (line 205)
* scroll-all-mode:                       Conflicts.           (line 205)
* Scrolling:                             Optimize scrolling.  (line   6)
* secondary button:                      Using the mouse.     (line   6)
* semantic tag:                          Customizing the display.
                                                              (line   6)
* semantic-sources:                      The Methods buffer.  (line  12)
* SHIFT-click:                           Using the mouse.     (line  39)
* Show windows:                          Hiding the ECB windows.
                                                              (line   6)
* Small screen:                          Small screens.       (line   6)
* Sources:                               ECB Sources-buffer.  (line   6)
* special-display:                       Temp- and compile-buffers.
                                                              (line  99)
* Speedbar:                              Simulating speedbar. (line   6)
* TAB key:                               Navigation/Selection.
                                                              (line   6)
* tag:                                   Customizing the display.
                                                              (line   6)
* temporary buffers:                     Temp- and compile-buffers.
                                                              (line   6)
* tmm:                                   Using popup-menus.   (line   6)
* tree-buffer:                           Overview.            (line   6)
* VC package:                            Conflicts.           (line 215)
* Version control:                       Conflicts.           (line 215)
* VM package:                            Conflicts.           (line 222)
* window-manager:                        Window-managers and ECB.
                                                              (line   6)
* winner:                                Conflicts.           (line 233)
* winner-mode:                           Conflicts.           (line 233)
* winring:                               Window-managers and ECB.
                                                              (line   6)
* xrefactory:                            Conflicts.           (line 240)

