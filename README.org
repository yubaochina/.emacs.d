* Introduction
This project proposed a solution to publish Jekyll blog using Emacs ORG mode.
Demo: https://yubaoliu.github.io/

* Features
- Insert Youtube Vedio
- Insert Bilibili Vedio
- Insert Image and publish to jekyll website
- Publish static resources: image, js, css ...
- Insert Jekyll org template
- Generate TOC automatically
- Latex is supported
    
* How to use
** Customize your blog path and publish repo path
- =lisp/init-org.el=:

#+begin_example
(require 'org2jekyll)
(custom-set-variables '(org2jekyll-blog-author "Yubao Liu")
                        '(org2jekyll-source-directory (expand-file-name "~/data/Project/blog"))
                       '(org2jekyll-jekyll-directory (expand-file-name "~/data/Project/yubaoliu.github.io"))
#+end_example

- My blog path
#+begin_example
https://github.com/yubaoliu/blog.git
#+end_example

- My website path
#+begin_example
https://github.com/yubaoliu/yubaoliu.github.io.git
#+end_example

** Insert Bilibili vedio
- yubao/insert-bilibili-vedio
** Insert timestamp
- yubao/insert-timestamp
** Insert post/page header
- yubao/insert-jekyll-page-template
- yubao/insert-jekyll-post-template
** Publish blog
- yubao/publish-jekyll-blog
** publish static resources
- org-publish-blog web
This will publish **image**, **js**, **css**
** Insert Image
#+begin_example
[[post:imge.png]]
#+end_example
* Install Emacs (>25)
** Install from apt-get
#+begin_src 
sudo add-apt-repository -yu ppa:kelleyk/emacs
sudo apt-get install  emacs26
#+end_src
** Install from source code
#+begin_example
sudo apt install libxpm-dev libgnutls-dev

git clone  https://github.com/emacs-mirror/emacs.git
./autogen.sh
./configure --prefix=<>
make
make install
#+end_example

** Install from dotfile repo
#+begin_example
git clone --recursive git@github.com:yubaoliu/dotfiles.git
#+end_example

standalone version:

#+begin_example
git clone --recursive https://github.com/yubaoliu/emacs.git .emacs.d
#+end_example

Compile /org-mode/ after /git clone/:

#+begin_example
cd .emacs.d/packages/org-mode/
make all
#+end_example
* Chinese Input Method
1. /locale/
#+begin_example
$ locale
LANG=en_US.UTF-8
LANGUAGE=en_US
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC=ja_JP.UTF-8
LC_TIME=ja_JP.UTF-8
LC_COLLATE="en_US.UTF-8"
LC_MONETARY=ja_JP.UTF-8
LC_MESSAGES="en_US.UTF-8"
LC_PAPER=ja_JP.UTF-8
LC_NAME=ja_JP.UTF-8
LC_ADDRESS=ja_JP.UTF-8
LC_TELEPHONE=ja_JP.UTF-8
LC_MEASUREMENT=ja_JP.UTF-8
LC_IDENTIFICATION=ja_JP.UTF-8
LC_ALL=
#+end_example

1. Add to =.bashrc=
#+begin_example
export LC_CTYPE=zh_CN.UTF-8
#+end_example

2. Modify start command
#+begin_example
rm /usr/bin/emacs24-x
LC_CTYPE=zh_CN.UTF-8 /usr/bin/emacs-x $@
#+end_example

4. =~/.xinitrc=
#+begin_example
export LC_CTYPE="zh_CN.UTF-8"

export XMODIFIERS='@im=fcitx'
export GTK_IM_MODULE=xim
export QT_IM_MODULE=xim
export GTK3_IM_MODULE=xim

fcitx -d
#+end_example

5. =/etc/environment=
#+begin_example
export LC_CTYPE="zh_CN.UTF-8"
sudo locale-gen
reboot
#+end_example
* Emacs Lisp
** Get Full Path of File Name
#+begin_src lisp
(defun insert-file-name ()
  "Insert the full path file name into the current buffer."
  (interactive)
  (insert (buffer-file-name (window-buffer (minibuffer-selected-window)))))
#+end_src

#+begin_src lisp
(defun filename ()   
    "Copy the full path of the current buffer."  
    (interactive)  
    (kill-new (buffer-file-name (window-buffer (minibuffer-selected-window)))))
#+end_src
** Buffer Name
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Names.html][Buffer Names]]

#+begin_src lisp
    (buffer-name)
               ⇒ "buffers.texi"
          
          (setq foo (get-buffer "temp"))
               ⇒ #<buffer temp>
          (kill-buffer foo)
               ⇒ nil
          (buffer-name foo)
               ⇒ nil
          foo
               ⇒ #<killed buffer>
#+end_src

* Tutorial
- Emacs Mini Manual: https://tuhdo.github.io/emacs-tutor.html
  
